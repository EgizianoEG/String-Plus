{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>StringPlus or String+ is a library that provides a range of useful string manipulation functions that can help you work with strings more efficiently in your Luau and Roblox projects.</p> <p>The library includes functions for performing common tasks such as analyzing a string, transforming a table into a string, sorting words alphabetically, randomizing strings, and pre-made iterator functions.</p>"},{"location":"#installation","title":"Installation","text":"<p>To use the StringPlus library, simply get it as a Model which is published on the   Roblox Creator Marketplace  and require it in your Luau code and call the desired function.</p> <p>This library does include a Typechecking sub-module with Pascal-case, Camel-case, and Lower-case function names support which allows for autocompletion.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Are you considering to contribute? Thank you for considering that!</p> <p>We welcome contributions of all kinds to this library. Whether you're looking to submit a pull request, or reporting a bug or requesting a new feature.</p>"},{"location":"#submitting-bugs","title":"Submitting Bugs","text":"<p>If you've found a bug or an issue in the library, we'd be grateful if you could report it to us.  Please include as much detail as possible, including steps to reproduce it, and any error messages or logs that you've encountered.</p>"},{"location":"#requesting-features","title":"Requesting features","text":"<p>We welcome any suggestions for new features or improvements. If you have an idea, please open an issue and provide details about it as possible about what you're proposing so we can discuss it.</p>"},{"location":"#submitting-changes-and-improvements","title":"Submitting Changes and Improvements","text":"<p>If you're a developer who is looking to submit changes to the project, here's what you need to know:</p> <ul> <li>All changes and improvemnet contributions should be submitted as pull requests.</li> <li>Make sure to name your variables and functions using Pascal case.</li> <li>Please make sure that your code is well-documented, optimized, and that you've included tests to cover any new functionality.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This library1 is licensed under the terms of the MIT license, which allows for free of use, distribution, and modification of the code as long as the original copyright and license notice are included.</p> <ol> <li> <p>The StringPlus library.\u00a0\u21a9</p> </li> </ol>"},{"location":"ChangeLog/","title":"Change Log","text":""},{"location":"ChangeLog/#change-log","title":"Change Log","text":""},{"location":"ChangeLog/#1.2.0","title":"1.2.0 February 3 2023","text":""},{"location":"ChangeLog/#1.2.0#Added","title":"Added","text":"<ul> <li>Documentation site for the StringPlus library</li> <li><code>Segments</code> function for the main module which does return an array of the original string cutten into parts with specific lengths #16</li> <li><code>Distort</code> function for the library's root module #22</li> <li><code>RandomFromString</code> function for the Random sub-module</li> <li><code>IsValidUsername</code> function for the Validator sub-module #3</li> <li><code>PasswordValidate</code> function for the Validator sub-module #15</li> </ul>"},{"location":"ChangeLog/#1.2.0#Improved","title":"Improvements","text":"<ul> <li>Improved <code>BinaryDecode</code> function for the main module #7</li> <li>Improved <code>UTF-8Reverese</code> function (properly handle trailing punctuation) #23</li> </ul>"},{"location":"ChangeLog/#1.2.0#Fixed","title":"Fixed","text":"<ul> <li>Validating functions: <code>IsAlpha</code> and <code>IsAlphaNum</code> #9</li> <li><code>Analyze</code> or previously known <code>AnalyzeText</code> function. Was not getting all the statics #18</li> </ul>"},{"location":"ChangeLog/#1.2.0#Changes","title":"Changes","text":"<ul> <li>Restructured <code>Generate</code> function (last known as <code>GenerateKey</code>) to be able to accept a single <code>Options</code> parameter which does include all of the rules of how the function structure the output random string #11</li> <li>Moved <code>Starts</code>, <code>Ends</code>, and <code>Contains</code> functions from the main module to the validator sub module #2</li> <li>Renamed three parameters of <code>Stringify</code> function and replaced some string concatenations into strings made with interpolation #17</li> <li>Renamed <code>AnalyzeText</code> and <code>ApplyTitleCase</code> functions to <code>Analyze</code> and <code>TitleCase</code> in order #19</li> <li>Renamed the second parameter of <code>BinaryEncode</code> function from <code>ByteSeparator</code> to <code>Delimiter</code> #6</li> <li>Renamed <code>GenerateKey</code> function to be <code>Generate</code> #11</li> <li>Renamed <code>MockupStringLibrary</code> variable into <code>MockupStandardLibrary</code> #1</li> <li>Renamed <code>SolveIncorrectIndexing</code> variable into <code>SolveIndexing</code> #1</li> <li>Renamed <code>IncludeSubLibraryFunctions</code> variable into <code>IncludeSubLibrariesFunctions</code> #1</li> </ul>"},{"location":"ChangeLog/#1.0.2#Removed","title":"Removed","text":"<ul> <li>Removed <code>AlphabeticalOrder</code> function from the library for no useful use of it and the existence of the alternative <code>SortWords</code> #4</li> </ul>"},{"location":"ChangeLog/#1.1.0","title":"1.1.0 January 19 2023","text":""},{"location":"ChangeLog/#1.1.0#Added","title":"Added","text":"<ul> <li>Support for camel case function names and typechecking f3a505c a110bd2</li> <li>Support for converting standard string library function names into pascal case f4a663a</li> </ul>"},{"location":"ChangeLog/#1.0.2#Improved","title":"Improvements","text":"<ul> <li>Improved <code>Stringify</code> function 4d7652d</li> <li>Improved <code>GenerateKey</code> function 1e0fe0d 64e1f8d</li> <li>Improved <code>BinaryEncode</code> function e8f318d</li> <li>Improved <code>BinaryDecode</code> function 1962354</li> <li>Code cleanup b0da4c6</li> </ul>"},{"location":"ChangeLog/#1.0.3","title":"1.0.3 January 6 2023","text":""},{"location":"ChangeLog/#1.0.2","title":"1.0.2 January 3 2023","text":""},{"location":"ChangeLog/#1.0.2#Improved","title":"Improvements","text":"<ul> <li>Improved <code>CamelCase</code> function</li> <li>Improved <code>SnakeCase</code> function</li> <li>Improved <code>AnalyzeText</code> function</li> </ul>"},{"location":"ChangeLog/#1.0.2#Fixed","title":"Fixed","text":"<ul> <li><code>RemoveConsonants</code> function is now behaving correctly and only removes consonants from the input string ignoring any other character</li> <li><code>RemoveExtraSpaces</code> function has been fixed (was deleting all the spaces)</li> <li><code>FilterByLength</code> function</li> <li><code>Expand</code> function has been fixed so that it does now recognize the numeric indexing to tables</li> <li><code>Lines</code> function has been fixed (was returning the first line only from table.unpack)</li> <li><code>Partition</code> and <code>RPartition</code> functions has been fixed (Same <code>Lines</code> function issue)</li> </ul>"},{"location":"ChangeLog/#1.0.2#Changes","title":"Changes","text":"<ul> <li><code>MatchIgnoreCase</code> function is now lowering the given pattern along with the given string</li> <li><code>UniqueWords</code> function is now returning only words which are without any punctuation, digits, or any other non-alphabetic character</li> <li><code>BinaryDecode</code> function does now support numbers as an input parameter</li> </ul>"},{"location":"ChangeLog/#1.0.2#Removed","title":"Removed","text":"<ul> <li><code>Words</code> function has been removed due to better equivalent <code>IWords</code> in the iterators module</li> </ul>"},{"location":"ChangeLog/#1.0.1","title":"1.0.1 January 1 2023","text":""},{"location":"ChangeLog/#1.0.1#Added","title":"Added","text":"<ul> <li>Extended TypeChecking Support 90c1fcc</li> </ul>"},{"location":"ChangeLog/#1.0.0","title":"1.0.0 January 1 2023","text":"<p>The first release and version of the library.</p>"},{"location":"Modules/Iterators/","title":"Iterators Sub-Module Documentation","text":""},{"location":"Modules/Iterators/#overview","title":"Overview","text":"<p>The StringIterators Sub-Library provides a set of functions for iterating through various components of a string. </p> <p>These functions return an iterator function that can be used to iterate through each character, word, sentence, or line in a string.</p>"},{"location":"Modules/Iterators/#functions","title":"Functions","text":""},{"location":"Modules/Iterators/#icharacters","title":"ICharacters","text":""},{"location":"Modules/Iterators/#icharacters-purpose","title":"Purpose","text":"<p>Returns an iterator function that returns each character in the string <code>Str</code> one at a time.</p>"},{"location":"Modules/Iterators/#icharacters-syntax","title":"Syntax","text":"<p><code>ICharacters(Str: string): ((string, number) -&gt; (number, string), string, number)</code></p>"},{"location":"Modules/Iterators/#icharacters-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to iterate over its characters.</li> </ul>"},{"location":"Modules/Iterators/#icharacters-returns","title":"Returns","text":"<ul> <li>function  An iterator function that returns the next character in the string on each call.</li> <li>number  The index of the character in the input string.</li> <li>string  The character.</li> </ul>"},{"location":"Modules/Iterators/#icharacters-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello!\"\nfor Index, Character in String.ICharacters(Str) do\n    print(Index .. (\":\"), Character)\nend\n</code></pre> <pre><code>1: H\n2: e\n3: l\n4: l\n5: o\n6: !\n</code></pre>"},{"location":"Modules/Iterators/#iwords","title":"IWords","text":""},{"location":"Modules/Iterators/#iwords-purpose","title":"Purpose","text":"<p>This function returns an iterator function that returns each word in the string <code>Str</code> one at a time.  Words are defined as sequences of non-whitespace characters separated by one or more whitespace characters.</p>"},{"location":"Modules/Iterators/#iwords-syntax","title":"Syntax","text":"<p><code>IWords(Str: string): ((string, number): ((string, number) -&gt; (number, number, string), string, number)</code></p>"},{"location":"Modules/Iterators/#iwords-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to iterate over its words.</li> </ul>"},{"location":"Modules/Iterators/#iwords-returns","title":"Returns","text":"<ul> <li>function  An iterator function that returns the next word in the string on each call.</li> <li>number  The start index of the word in the input string.</li> <li>number  The end index of the word in the input string.</li> <li>string  The word itself.</li> </ul>"},{"location":"Modules/Iterators/#iwords-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"This is a test string.\"\nfor Start, End, Word in String.IWords(Str) do\n    print(string.format(\"[%d-%d] - \\\"%s\\\"\", Start, End, Word))\nend\n</code></pre> <pre><code>[1-4] - \"This\"\n[6-7] - \"is\"\n[9-9] - \"a\"\n[11-14] - \"test\"\n[16-21] - \"string\"\n</code></pre>"},{"location":"Modules/Iterators/#isentences","title":"ISentences","text":""},{"location":"Modules/Iterators/#iwords-purpose","title":"Purpose","text":"<p>Returns an iterator function that returns each sentence in the input string one at a time.  Sentences are defined as sequences of characters separated by one or more sentence-ending punctuation characters (e.g. <code>.</code>, <code>?</code>, <code>!</code>).</p>"},{"location":"Modules/Iterators/#iwords-syntax","title":"Syntax","text":"<p><code>ISentences(Str: string): ((string) -&gt; (number, number, string, string), string, number)</code></p>"},{"location":"Modules/Iterators/#iwords-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to iterate over its words.</li> </ul>"},{"location":"Modules/Iterators/#iwords-returns","title":"Returns","text":"<ul> <li>function   An iterator function that returns the next sentence in the string on each call.</li> <li>number  The start index of the sentence in the input string.</li> <li>number  The end index of the sentence in the input string.</li> <li>string  The sentence.</li> <li>string   The ending punctuation of the sentence (e.g. <code>.</code>, <code>?</code>, <code>!</code>).</li> </ul>"},{"location":"Modules/Iterators/#iwords-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Sentences = {}\nlocal Str = \"This is the first sentence. This is the second sentence! This is the third sentence?\"\n\nfor Start, End, Sentence, Ending in String.ISentences(Str) do\n    table.insert(Sentences, {Start = Start, End = End, Sentence = Sentence, Ending = Ending})\nend\n\nprint(table.unpack(Sentences))\n</code></pre> <pre><code>{ Start = 1, End = 26, Sentence = \"This is the first sentence\", Ending = \".\" },\n{ Start = 29, End = 55, Sentence = \"This is the second sentence\", Ending = \"!\" },\n{ Start = 58, End = 83, Sentence = \"This is the third sentence\", Ending = \"?\" }\n</code></pre>"},{"location":"Modules/MainModule/","title":"The Main Module Documentation","text":""},{"location":"Modules/MainModule/#overview","title":"Overview","text":"<p>The Main Module, also referred to as the Root Module, contains most of the functions in the library.</p>"},{"location":"Modules/MainModule/#configurable-variables","title":"Configurable Variables","text":""},{"location":"Modules/MainModule/#mockupstandardlibrary","title":"MockupStandardLibrary boolean","text":"<p> Default: <code>false</code></p> <p>The MockupStandardLibrary boolean determines whether or not to include the standard string library functions in the StringPlus library. This can be useful if you want to use the StringPlus library as your main string manipulation library, but still want access to the functions provided by the standard string library.</p> <p>By default, this boolean is set to <code>false</code>, meaning that the standard string library functions are not included as mockups in the StringPlus library. If you set the boolean to <code>true</code>, the standard string library functions will be included in the library and will behave similarly to their counterparts in the standard string library.</p> <p>Note</p> <p>Using the mockup functions in the StringPlus library may have performance implications, as they are implemented as wrappers around the corresponding functions in the standard string library. It is recommended to only enable the inclusion of the mockup functions if you need to use them in your code.</p>"},{"location":"Modules/MainModule/#functionnamescase","title":"FunctionNamesCase string","text":"<p> Default: <code>\"PascalCase\"</code></p> <p> Possible Values: <code>\"PascalCase\"</code>, <code>\"LowerCase\"</code>, <code>\"CamelCase\"</code>, <code>\"SnakeCase\"</code></p> <p>The FunctionNamesCase variable allows you to change the naming style of the functions in the StringPlus library. By default, the functions are named in PascalCase style (e.g. \"TransformString\"), but this variable does allow to change the naming style to camelCase (e.g. \"transformString\"), snake_case (e.g. \"transform_string\"), or lower (e.g. \"transformstring\").</p> <p>To change the naming style of the functions, simply set the variable to one of the possible values listed above. The new naming style will be applied to all functions in the StringPlus library, including both the main functions and the mockup functions (if enabled).</p> <p>Info</p> <p>Changing the FunctionNamesCase variable will not affect the behavior of the functions. It will only change their names, so developers should be careful not to confuse the functions with their previous names when using a new/different naming style.</p>"},{"location":"Modules/MainModule/#includesublibrariesfunctions","title":"IncludeSubLibrariesFunctions boolean","text":"<p> Default: <code>true</code></p> <p>This boolean variable determines whether to include the functions from the sub-modules of the StringPlus library directly in the main module. When set to <code>true</code>, the functions from the sub-modules will be included in the main module and can be called directly, just like any other function in the module.</p> <p>By default, this variable is set to <code>true</code>, meaning that the functions from the sub-modules are included directly in the main module. If you set the variable to <code>false</code>, the functions from the sub-modules will still be available in the main module, but they will be accessed as tables rather than functions.</p> <p>Info</p> <p>Enabling or disabling the inclusion of the sub-module functions will not affect the behavior of the functions. It will only change the way they are accessed.</p> <p>Note</p> <p>For sub-modules that returns a function, this function will be included as is and the name of it will be the same name of the sub-module1. Also, they will be still included and integrated into the main module even if this variable is set to <code>false</code>.</p>"},{"location":"Modules/MainModule/#solveindexing","title":"SolveIndexing boolean","text":"<p> Default: <code>false</code></p> <p>The SolveIndexing variable determines whether the StringPlus library should attempt to solve incorrect indexing when accessing functions in the library. This can be useful if the developer has changed the naming style of the functions using the FunctionNamesCase variable (e.g. from PascalCase to CamelCase) and wants to ensure that the functions can still be accessed without any issues.</p> <p>By default, this variable is set to <code>false</code>, meaning that the library will not attempt to solve incorrect indexing when accessing functions. If you set the variable to <code>true</code>, the library will attempt to solve incorrect indexing and will return functions that match the specified name if they exist, regardless of the naming style set by the FunctionNamesCase variable.</p> <p>Note</p> <p>Enabling the SolveIncorrectIndexing variable may have performance implications, as it requires the library to perform additional processing when accessing functions. It is recommended to only enable this variable if there was a necessity.</p>"},{"location":"Modules/MainModule/#functions","title":"Functions","text":""},{"location":"Modules/MainModule/#escape","title":"Escape","text":""},{"location":"Modules/MainModule/#escape-purpose","title":"Purpose","text":"<p>Escapes any character in the given string that is considered a magic character by adding an additional percent sign \"%\" before them.</p>"},{"location":"Modules/MainModule/#escape-syntax","title":"Syntax","text":"<p><code>Escape(Str: string): string</code></p>"},{"location":"Modules/MainModule/#escape-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be escaped.</li> </ul>"},{"location":"Modules/MainModule/#escape-returns","title":"Returns","text":"<ul> <li>string  The escaped version of the given string.</li> </ul>"},{"location":"Modules/MainModule/#escape-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Escaped = StringPlus.Escape(\"Hello + World\")\nprint(Escaped)\n\nlocal Escaped = StringPlus.Escape(\"Those are escaped brackets: ()\")\nprint(Escaped)\n</code></pre> <pre><code>Hello %+ World\nThose are escaped brackets: %(%)\n</code></pre>"},{"location":"Modules/MainModule/#equalsignorecase","title":"EqualsIgnoreCase","text":""},{"location":"Modules/MainModule/#equalsignorecase-purpose","title":"Purpose","text":"<p>Compares two strings and returns true if they are equal, ignoring the case of the characters in the strings.</p>"},{"location":"Modules/MainModule/#equalsignorecase-syntax","title":"Syntax","text":"<p><code>EqualsIgnoreCase(Str_1: string, Str_2: string): boolean</code></p>"},{"location":"Modules/MainModule/#equalsignorecase-parameters","title":"Parameters","text":"<ul> <li><code>Str_1: string</code>  The first string to be compared.</li> <li><code>Str_1: string</code>  The second string to be compared.</li> </ul>"},{"location":"Modules/MainModule/#equalsignorecase-returns","title":"Returns","text":"<ul> <li>boolean <code>true</code> if the given strings are equal, ignoring the case of the characters; <code>false</code> otherwise.</li> </ul>"},{"location":"Modules/MainModule/#equalsignorecase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Equal = StringPlus.EqualsIgnoreCase(\"Hello\", \"hello\")\nprint(Equal)\n\nlocal Equal = StringPlus.EqualsIgnoreCase(\"Hello\", \"hellooo\")\nprint(Equal)\n</code></pre> <pre><code>true\nfalse\n</code></pre>"},{"location":"Modules/MainModule/#removevowels","title":"RemoveVowels","text":""},{"location":"Modules/MainModule/#removevowels-purpose","title":"Purpose","text":"<p>Removes all vowels from a string and replaces them with a specified replacement string if it was provided.</p>"},{"location":"Modules/MainModule/#removevowels-syntax","title":"Syntax","text":"<p><code>RemoveVowels(Str: string, Replacement: string?): string</code></p>"},{"location":"Modules/MainModule/#removevowels-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code> The input string from which to remove the vowels.</li> <li><code>Replacement: string</code> Optional  The replacement string to use in place of the removed vowels. If not provided, the vowels are simply removed without being replaced.</li> </ul>"},{"location":"Modules/MainModule/#removevowels-returns","title":"Returns","text":"<ul> <li>string: The input string with all vowels removed and replaced, if specified.</li> </ul>"},{"location":"Modules/MainModule/#removevowels-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local NoVowels = StringPlus.RemoveVowels(\"Hello, World!\")\nprint(NoVowels)\n\nlocal NoVowels = StringPlus.RemoveVowels(\"Hello, World!\", \"-\")\nprint(NoVowels)\n</code></pre> <pre><code>Hll, Wrld!\nH-ll-, W-rld!\n</code></pre>"},{"location":"Modules/MainModule/#removeconsonants","title":"RemoveConsonants","text":""},{"location":"Modules/MainModule/#removeconsonants-purpose","title":"Purpose","text":"<p>Removes all consonants from a string and replaces them with a specified replacement string if provided.</p>"},{"location":"Modules/MainModule/#removeconsonants-syntax","title":"Syntax","text":"<p><code>RemoveConsonants(Str: string, Replacement: string?): string</code></p>"},{"location":"Modules/MainModule/#removeconsonants-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string from which to remove the consonants.</li> <li><code>Replacement: string</code> Optional  The replacement string to use in place of the removed consonants.  If not provided, the consonants are simply removed without being replaced.</li> </ul>"},{"location":"Modules/MainModule/#removeconsonants-returns","title":"Returns","text":"<ul> <li>string  The input string with all consonants removed and replaced, if specified.</li> </ul>"},{"location":"Modules/MainModule/#removeconsonants-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local NoConsonants = StringPlus.RemoveConsonants(\"Hello, World!\")\nprint(NoConsonants)\n\nlocal NoConsonants = StringPlus.RemoveConsonants(\"Hello, World!\", \"-\")\nprint(NoConsonants)\n</code></pre> <pre><code>eo, o!\n-e--o, -o---!\n</code></pre>"},{"location":"Modules/MainModule/#removepunctuation","title":"RemovePunctuation","text":""},{"location":"Modules/MainModule/#removepunctuation-purpose","title":"Purpose","text":"<p>Removes all punctuation from a string and replaces them with a specified replacement string, if provided.</p>"},{"location":"Modules/MainModule/#removepunctuation-syntax","title":"Syntax","text":"<p><code>RemovePunctuation(Str: string, Replacement: string?): string</code></p>"},{"location":"Modules/MainModule/#removepunctuation-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string from which to remove the punctuation.</li> <li><code>Replacement: string</code> Optional  The replacement string to use in place of the removed punctuation.  If not provided, the punctuation is simply removed without being replaced.</li> </ul>"},{"location":"Modules/MainModule/#removepunctuation-returns","title":"Returns","text":"<ul> <li>string  The input string with all punctuation removed and replaced, if specified..</li> </ul>"},{"location":"Modules/MainModule/#removepunctuation-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local NoPunctuation = StringPlus.RemovePunctuation(\"Hello, World!\")\nprint(NoPunctuation)\n\nlocal NoPunctuation = StringPlus.RemovePunctuation(\"Hello, World!\", \"-\")\nprint(NoPunctuation)\n</code></pre> <pre><code>Hello World\nHello- World-\n</code></pre>"},{"location":"Modules/MainModule/#removeextraspaces","title":"RemoveExtraSpaces","text":""},{"location":"Modules/MainModule/#removeextraspaces-purpose","title":"Purpose","text":"<p>Removes all leading, trailing, and extra spaces from a given string.</p>"},{"location":"Modules/MainModule/#removeextraspaces-syntax","title":"Syntax","text":"<p><code>RemoveExtraSpaces(Str: string): string</code></p>"},{"location":"Modules/MainModule/#removeextraspaces-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string from which to remove extra spaces.</li> </ul>"},{"location":"Modules/MainModule/#removeextraspaces-returns","title":"Returns","text":"<ul> <li>string  A string with all leading, trailing, and extra spaces removed.</li> </ul>"},{"location":"Modules/MainModule/#removeextraspaces-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"   This string   has extra   spaces   \"\nlocal NewStr = StringPlus.RemoveExtraSpaces(Str)\nprint(NewStr)\n</code></pre> <pre><code>This string has extra spaces\n</code></pre>"},{"location":"Modules/MainModule/#matchignorecase","title":"MatchIgnoreCase","text":""},{"location":"Modules/MainModule/#matchignorecase-purpose","title":"Purpose","text":"<p>Searches for a pattern within a string and returns the first occurrence of the pattern, ignoring the case of the characters in the string and pattern.</p>"},{"location":"Modules/MainModule/#matchignorecase-syntax","title":"Syntax","text":"<p><code>MatchIgnoreCase(Str: string, Pattern: string, Init: number?): string?</code></p>"},{"location":"Modules/MainModule/#matchignorecase-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be searched.</li> <li><code>Pattern: string</code>  The pattern to be searched for.</li> <li><code>Init: number</code> Optional  The starting index for the search.</li> </ul>"},{"location":"Modules/MainModule/#matchignorecase-returns","title":"Returns","text":"<ul> <li>string  A string containing the first occurrence of the pattern within the string, or <code>nil</code> if the pattern is not found.</li> </ul>"},{"location":"Modules/MainModule/#matchignorecase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Match = StringPlus.MatchIgnoreCase(\"Hello, World!\", \"WORLD\")\nprint(Match)\n</code></pre> <pre><code>World\n</code></pre>"},{"location":"Modules/MainModule/#truncate","title":"Truncate","text":""},{"location":"Modules/MainModule/#truncate-purpose","title":"Purpose","text":"<p>Truncates the given string to the specified length and adds an optional omission suffix if specified. If the string is already shorter than the Length, the original Str is returned.</p>"},{"location":"Modules/MainModule/#truncate-syntax","title":"Syntax","text":"<p><code>Truncate(Str: string, Length: number, OmissionSuffix: string?): string?</code></p>"},{"location":"Modules/MainModule/#truncate-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be truncated.</li> <li><code>Length: number</code>  The maximum length of the string or the minimum length to truncate it.</li> <li><code>OmissionSuffix: string</code> Optional  The string to be added to the end of the truncated string. Default is <code>\"\u2026\u200b\"</code>.</li> </ul>"},{"location":"Modules/MainModule/#truncate-returns","title":"Returns","text":"<ul> <li>string  The truncated string.</li> </ul>"},{"location":"Modules/MainModule/#truncate-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Truncated = StringPlus.Truncate(\"Hello World\", 5)\nprint(Truncated)\n\nlocal Truncated = StringPlus.Truncate(\"Hello World\", 5, \"!!!\")\nprint(Truncated)\n\nlocal Truncated = StringPlus.Truncate(\"Hello\", 5)\nprint(Truncated)\n</code></pre> <pre><code>Hello...\nHello!!!\nHello\n</code></pre>"},{"location":"Modules/MainModule/#swapcase","title":"SwapCase","text":""},{"location":"Modules/MainModule/#swapcase-purpose","title":"Purpose","text":"<p>Swaps the case of all the letters in the given string.</p>"},{"location":"Modules/MainModule/#swapcase-syntax","title":"Syntax","text":"<p><code>SwapCase(Str: string): string</code></p>"},{"location":"Modules/MainModule/#swapcase-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be modified.</li> </ul>"},{"location":"Modules/MainModule/#swapcase-returns","title":"Returns","text":"<ul> <li>string  A new string with the case of all the letters swapped.</li> </ul>"},{"location":"Modules/MainModule/#swapcase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Swapped = StringPlus.SwapCase(\"Hello World\")\nprint(Swapped)\n\nlocal Swapped = StringPlus.SwapCase(\"tHis Is A TeSt\")\nprint(Swapped)\n</code></pre> <pre><code>hELLO wORLD\nThIs iS a tEsT\n</code></pre>"},{"location":"Modules/MainModule/#strip","title":"Strip","text":""},{"location":"Modules/MainModule/#strip-purpose","title":"Purpose","text":"<p>Removes leading and trailing characters from a string.</p>"},{"location":"Modules/MainModule/#strip-syntax","title":"Syntax","text":"<p><code>Strip(Str: string, Characters: string?): string</code></p>"},{"location":"Modules/MainModule/#strip-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be stripped.</li> <li><code>Characters : string</code> Optional  A string of characters to be stripped from the start and end of the string.  If not provided, default is to strip white-space characters2.</li> </ul>"},{"location":"Modules/MainModule/#strip-returns","title":"Returns","text":"<ul> <li>string  A new string with leading and trailing characters removed.</li> </ul>"},{"location":"Modules/MainModule/#strip-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local StrippedString = StringPlus.Strip(\"  hello  \", \" \")\nprint(StrippedString)\n\nlocal StrippedString = StringPlus.Strip(\"!+!+!he!llo!!\", \"!+-\")\nprint(StrippedString)\n</code></pre> <pre><code>hello\nhe!llo\n</code></pre>"},{"location":"Modules/MainModule/#rstrip","title":"RStrip","text":""},{"location":"Modules/MainModule/#rstrip-purpose","title":"Purpose","text":"<p>Removes the specified characters from the end of the string or in other words, the right side of it.</p>"},{"location":"Modules/MainModule/#rstrip-syntax","title":"Syntax","text":"<p><code>RStrip(Str: string, Characters: string?): string</code></p>"},{"location":"Modules/MainModule/#rstrip-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be stripped.</li> <li><code>Characters : string</code> Optional  A string containing the characters to be removed.  If not specified, the function will remove white-space characters2.</li> </ul>"},{"location":"Modules/MainModule/#rstrip-returns","title":"Returns","text":"<ul> <li>string  A new string with trailing characters removed.</li> </ul>"},{"location":"Modules/MainModule/#rstrip-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello World \\n\"\nlocal StrippedStr = StringPlus.RStrip(Str, \"\\n\")\nprint(StrippedStr)\n\nlocal Str = \"Hello World!!!\"\nlocal StrippedStr = StringPlus.RStrip(Str, \"!\")\nprint(StrippedStr)\n</code></pre> <pre><code>Hello World\nHello World\n</code></pre>"},{"location":"Modules/MainModule/#lstrip","title":"LStrip","text":""},{"location":"Modules/MainModule/#lstrip-purpose","title":"Purpose","text":"<p>Removes leading characters from a given string i.e. left side characters.</p>"},{"location":"Modules/MainModule/#lstrip-syntax","title":"Syntax","text":"<p><code>LStrip(Str: string, Characters: string?): string</code></p>"},{"location":"Modules/MainModule/#lstrip-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to be modified.</li> <li><code>Characters : string</code> Optional  The characters to be removed from the beginning of the string. If no characters are specified, the function will remove leading white-space characters2 by default.</li> </ul>"},{"location":"Modules/MainModule/#lstrip-returns","title":"Returns","text":"<ul> <li>string  A new string with leading characters removed.</li> </ul>"},{"location":"Modules/MainModule/#lstrip-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"   Hello World\"\nlocal StrippedStr = StringPlus.LStrip(Str)\nprint(StrippedStr)\n\nlocal Str = \"123456Hello World\"\nlocal StrippedStr = StringPlus.LStrip(Str, \"%d\")\nprint(StrippedStr)\n\nlocal Str = \"\\t  Hello World\"\nlocal StrippedStr = StringPlus.LStrip(Str, \" \")\nprint(StrippedStr)\n</code></pre> <pre><code>Hello World\nHello World\n\\t  Hello World\n</code></pre>"},{"location":"Modules/MainModule/#center","title":"Center","text":""},{"location":"Modules/MainModule/#center-purpose","title":"Purpose","text":"<p>Takes a string as input and centers it within a specified length, using a fill character to fill in the remaining spaces.  The fill character is optional and defaults to a space if not provided.</p>"},{"location":"Modules/MainModule/#center-syntax","title":"Syntax","text":"<p><code>Center(Str: string, Length: number, FillChar: string?): string</code></p>"},{"location":"Modules/MainModule/#center-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be centered.</li> <li><code>Length: number</code> The desired length of the resulting string.</li> <li><code>FillChar: string</code> Optional  The character to use to fill in the remaining spaces.  Defaults to a space if not provided.</li> </ul>"},{"location":"Modules/MainModule/#center-returns","title":"Returns","text":"<ul> <li>string  The input string centered within the specified length, using the fill character to fill in the remaining spaces.</li> </ul>"},{"location":"Modules/MainModule/#center-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Centered = StringPlus.Center(\"Hello\", 10)\nprint(Centered)\n\nlocal Centered = StringPlus.Center(\"Hello\", 9, \"+\")\nprint(Centered)\n</code></pre> <pre><code>  Hello   \n++Hello++\n</code></pre>"},{"location":"Modules/MainModule/#rjust","title":"RJust","text":""},{"location":"Modules/MainModule/#rjust-purpose","title":"Purpose","text":"<p>Tight-justifies the given string by padding it with the specified filling character up to the given length.  If the length of the given string is already equal to or greater than the given length, the original string is returned without any performed padding.</p>"},{"location":"Modules/MainModule/#rjust-syntax","title":"Syntax","text":"<p><code>RJust(Str: string, Length: number, FillChar: string?): string</code></p>"},{"location":"Modules/MainModule/#rjust-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be right-justified.</li> <li><code>Length: number</code> The desired length of the returned string.</li> <li><code>FillChar: string</code> Optional  The character to be used for padding. Defaults to a space character.</li> </ul>"},{"location":"Modules/MainModule/#rjust-returns","title":"Returns","text":"<ul> <li>string  The modified string of the original one aligned to the right, padded with the specified fill character if specified or a space character by default.</li> </ul>"},{"location":"Modules/MainModule/#rjust-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello\"\nlocal JustifiedString = StringPlus.RJust(Str, 10)\nprint(JustifiedString)\n\nlocal Str = \"Hello\"\nlocal JustifiedString = StringPlus.RJust(Str, 10, \"*\")\nprint(JustifiedString)\n\nlocal Str = \"Hello\"\nlocal JustifiedString = StringPlus.RJust(Str, 4)\nprint(JustifiedString)\n</code></pre> <pre><code>Hello     \nHello*****\nHello\n</code></pre>"},{"location":"Modules/MainModule/#ljust","title":"LJust","text":""},{"location":"Modules/MainModule/#ljust-purpose","title":"Purpose","text":"<p>Aligns the given string to the left by padding it with the given fill character until it reaches the desired length.  If the length of the string is already equal to or greater than the provided length, the original string is returned as is.</p>"},{"location":"Modules/MainModule/#ljust-syntax","title":"Syntax","text":"<p><code>LJust(Str: string, Length: number, FillChar: string?): string</code></p>"},{"location":"Modules/MainModule/#ljust-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be left-aligned.</li> <li><code>Length: number</code> The desired length of the left-aligned string.</li> <li><code>FillChar: string</code> Optional  The character to use for padding. Defaults to a space character.</li> </ul>"},{"location":"Modules/MainModule/#ljust-returns","title":"Returns","text":"<ul> <li>string  The left-aligned string with the desired length.</li> </ul>"},{"location":"Modules/MainModule/#ljust-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local JustifiedString = StringPlus.LJust(\"Hello\", 10)\nprint(JustifiedString)\n\nlocal JustifiedString = StringPlus.LJust(\"Hello\", 10, \"*\")\nprint(JustifiedString)\n</code></pre> <pre><code>     Hello\n*****Hello\n</code></pre>"},{"location":"Modules/MainModule/#expandtabs","title":"ExpandTabs","text":""},{"location":"Modules/MainModule/#expandtabs-purpose","title":"Purpose","text":"<p>Expands all tab characters in the given string to the specified number of spaces, as defined by the optional <code>TabSize</code> parameter.  If <code>TabSize</code> is not provided, it defaults to 4 space characters.</p>"},{"location":"Modules/MainModule/#expandtabs-syntax","title":"Syntax","text":"<p><code>ExpandTabs(Str: string, TabSize: number?): string</code></p>"},{"location":"Modules/MainModule/#expandtabs-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string in which to expand all tab characters.</li> <li><code>TabSize: number</code> Optional  The number of spaces to use to replace each tab character. If not provided, defaults to 4 spaces.</li> </ul>"},{"location":"Modules/MainModule/#expandtabs-returns","title":"Returns","text":"<ul> <li>string  A string with all tab characters expanded to the specified number of spaces.</li> </ul>"},{"location":"Modules/MainModule/#expandtabs-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello\\tWorld\"\nlocal Expanded = StringPlus.ExpandTabs(Str)\nprint(Expanded)\n\nlocal Str = \"Hello\\t\\tWorld\"\nlocal Expanded = StringPlus.ExpandTabs(Str)\nwarn(Expanded)\n\nlocal Str = \"Hello\\t\\tWorld\"\nlocal Expanded = StringPlus.ExpandTabs(Str, 0)\nprint(Expanded)\n</code></pre> <pre><code>Hello   World\nHello       World\nHelloWorld\n</code></pre>"},{"location":"Modules/MainModule/#translate","title":"Translate","text":""},{"location":"Modules/MainModule/#translate-purpose","title":"Purpose","text":"<p>Replaces all occurrences of specified characters in the given string with new characters as defined in the mapping table.  The mapping table should contain a mapping of old characters (numbers representing the ASCII codes of the characters) to new characters which are also represented as numbers.</p>"},{"location":"Modules/MainModule/#translate-syntax","title":"Syntax","text":"<p><code>Translate(Str: string, MappingTable: {[number]: number}): string</code></p>"},{"location":"Modules/MainModule/#translate-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to perform the translation on.</li> <li><code>MappingTable: table</code>  A table that specifies the mapping of characters to be replaced.  The keys of the table should be the characters to be replaced, and the values should be the characters that the keys should be replaced with.</li> </ul>"},{"location":"Modules/MainModule/#translate-returns","title":"Returns","text":"<ul> <li>string  The modified string with all specified characters replaced with their corresponding values in the <code>MappingTable</code>.</li> </ul>"},{"location":"Modules/MainModule/#translate-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local MappingTable = {[65] = 97, [66] = 98} -- This table maps capital A (ASCII code 65) to lowercase a (ASCII code 97), and capital B (ASCII code 66) to lowercase b (ASCII code 98).\nlocal OriginalStr = \"AB\"\nlocal TranslatedStr = StringPlus.Translate(OriginalStr, MappingTable)\nprint(TranslatedStr)\n\nlocal MappingTable = {[72] = 104, [87] = 119}\nlocal OriginalStr = \"Hello World!\"\nlocal TranslatedStr = StringPlus.Translate(OriginalStr, MappingTable)\nprint(TranslatedStr)\n</code></pre> <pre><code>ab\nhello world!\n</code></pre>"},{"location":"Modules/MainModule/#count","title":"Count","text":""},{"location":"Modules/MainModule/#count-purpose","title":"Purpose","text":"<p>Counts the number of occurrences of the given pattern/substring in the given string.  The <code>Start</code> and <code>End</code> parameters can be used to specify a range within the <code>Str</code> string to search for the pattern.</p>"},{"location":"Modules/MainModule/#count-syntax","title":"Syntax","text":"<p><code>Count(Str: string, Pattern: string, Start: number?, End: number?): number</code></p>"},{"location":"Modules/MainModule/#count-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to search for the Pattern.</li> <li><code>Pattern: string</code>  The pattern to search for within the string.  This can be a lua pattern, word, or character.</li> <li><code>Start: number</code> Optional  The index within the string to start the search.  Defaults to <code>1</code>.</li> <li><code>End: number</code> Optional  The index within the string to end the search.  Defaults to the length of the <code>Str</code> string.</li> </ul>"},{"location":"Modules/MainModule/#count-returns","title":"Returns","text":"<ul> <li>number  The number of occurrences of the Pattern in the Str string within the specified range.</li> </ul>"},{"location":"Modules/MainModule/#count-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Count = StringPlus.Count(\"Hello, World!\", \"l\")\nprint(Count)\n\nlocal Count = StringPlus.Count(\"Hello, World!\", \"l\", 6)\nprint(Count)\n\nlocal Count = StringPlus.Count(\"Hello, World!\", \"l\", 6, 8)\nprint(Count)\n\nlocal Count = StringPlus.Count(\"the quick brown fox jumps over the lazy dog\", \"the\")\nprint(Count)\n</code></pre> <pre><code>3\n1\n0\n2\n</code></pre>"},{"location":"Modules/MainModule/#sortwords","title":"SortWords","text":""},{"location":"Modules/MainModule/#sortwords-purpose","title":"Purpose","text":"<p>Sorts the words in a string alphabetically in ascending or descending order.</p>"},{"location":"Modules/MainModule/#sortwords-syntax","title":"Syntax","text":"<p><code>SortWords(Str: string, Order: Enum.SortDirection?, ReturnArray: boolean?): (string | {string})</code></p>"},{"location":"Modules/MainModule/#sortwords-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be sorted.</li> <li><code>Order: string</code> Optional  The sort direction, either ascending or descending. Default is ascending (<code>Enum.SortDirection.Ascending</code>).</li> <li><code>ReturnArray: boolean</code> Optional  If <code>true</code>, returns the sorted words as an array of strings.  If <code>false</code>, returns a string with the sorted words separated by a space. Default is <code>false</code>.</li> </ul>"},{"location":"Modules/MainModule/#sortwords-returns","title":"Returns","text":"<ul> <li>string | table  If <code>ReturnArray</code> is <code>true</code>, the function will return an array of the sorted words; Otherwise, the function would return a string with the sorted words separated by spaces.</li> </ul>"},{"location":"Modules/MainModule/#sortwords-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local SortedWords = StringPlus.SortWords(\"apple banana cherry\", Enum.SortDirection.Descending, true)\nprint(SortedWords)\n\nlocal SortedString = StringPlus.SortWords(\"apple banana cherry\", Enum.SortDirection.Ascending)\nprint(SortedString)\n\nlocal SortedString = StringPlus.SortWords(\"apple banana cherry\")\nprint(SortedString)\n</code></pre> <pre><code>{\"cherry\", \"banana\", \"apple\"}\napple banana cherry\napple banana cherry\n</code></pre>"},{"location":"Modules/MainModule/#sortbylength","title":"SortByLength","text":""},{"location":"Modules/MainModule/#sortbylength-purpose","title":"Purpose","text":"<p>Sorts an array of strings by their length, in ascending or descending order.</p>"},{"location":"Modules/MainModule/#sortbylength-syntax","title":"Syntax","text":"<p><code>SortByLength(StringArray: {string}, Order: Enum.SortDirection?): {string}</code></p>"},{"location":"Modules/MainModule/#sortbylength-parameters","title":"Parameters","text":"<ul> <li><code>StringArray: table</code>  The array of strings to be sorted.</li> <li><code>Order: string</code> Optional  The sort direction. Acceptable values are <code>Enum.SortDirection.Ascending</code> and <code>Enum.SortDirection.Descending</code>.  Default is the ascending order.</li> </ul>"},{"location":"Modules/MainModule/#sortbylength-returns","title":"Returns","text":"<ul> <li>table  The sorted array of strings.</li> </ul>"},{"location":"Modules/MainModule/#sortbylength-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Array = {\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"}\n\nprint(StringPlus.SortByLength(Array))\nprint(StringPlus.SortByLength(Array, Enum.SortDirection.Descending))\n</code></pre> <pre><code>{\"fig\", \"date\", \"apple\", \"cherry\", \"banana\", \"elderberry\"}\n{\"elderberry\", \"banana\", \"cherry\", \"apple\", \"date\", \"fig\"}\n</code></pre>"},{"location":"Modules/MainModule/#filterbylength","title":"FilterByLength","text":""},{"location":"Modules/MainModule/#filterbylength-purpose","title":"Purpose","text":"<p>Filters a given array of strings, removing all strings that do not have a specified length.</p>"},{"location":"Modules/MainModule/#filterbylength-syntax","title":"Syntax","text":"<p><code>FilterByLength(StringArray: {string}, Length: number): {string}</code></p>"},{"location":"Modules/MainModule/#filterbylength-parameters","title":"Parameters","text":"<ul> <li><code>StringArray: table</code>  The array of strings to be filtered.</li> <li><code>Length: number</code>  The desired length of the strings to be kept in the array.</li> </ul>"},{"location":"Modules/MainModule/#filterbylength-returns","title":"Returns","text":"<ul> <li>table  An array containing only the strings from the input array that have the specified length.</li> </ul>"},{"location":"Modules/MainModule/#filterbylength-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local FilteredArray = StringPlus.FilterByLength({\"Hello\", \"Hi\", \"Goodbye\"}, 5)\nprint(FilteredArray)\n\nlocal FilteredArray = StringPlus.FilterByLength({\"Hello\", \"Goodbye\", \"Hi!\", \"Bye\"}, 3)\nprint(FilteredArray)\n</code></pre> <pre><code>{\"Hello\"}\n{\"Hi!\", \"Bye\"}\n</code></pre>"},{"location":"Modules/MainModule/#segments","title":"Segments","text":""},{"location":"Modules/MainModule/#segments-purpose","title":"Purpose","text":"<p>Returns an array of strings containing the segments of the input string each one with the specified length except for the last segment that could be less than the specified length number.</p>"},{"location":"Modules/MainModule/#segments-syntax","title":"Syntax","text":"<p><code>Segments(Str: string, Length: number): {string}</code></p>"},{"location":"Modules/MainModule/#segments-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to split it into chunks.</li> <li><code>Length: number</code>  The desired length for each segment of the input string in the returned array.</li> </ul>"},{"location":"Modules/MainModule/#segments-returns","title":"Returns","text":"<ul> <li>table  An array containing the segments of the given string.</li> </ul>"},{"location":"Modules/MainModule/#segments-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>-- In the next prints the input string \"Hello World!\" is divided into segments of length 3 and 5\nlocal Str = \"Hello World!\"\nprint(StringPlus.Segments(Str, 3))\nprint(StringPlus.Segments(Str, 5))\n\n-- In the next few lines, we are dividing the Str variable into segements of length 4 and iterating over the returned array to print it's indexes and values using string interpolation\nlocal Str = \"This is a test string\"\nlocal StrSegments = StringPlus.Segments(Str, 4)\nfor Index, Segment in ipairs(StrSegments) do\n    print(`{Index}: \"{Segment}\"`)\nend\n</code></pre> <pre><code>{\n   [1] = \"Hel\",\n   [2] = \"lo \",\n   [3] = \"Wor\",\n   [4] = \"ld!\"\n}\n{\n   [1] = \"Hello\",\n   [2] = \" Worl\",\n   [3] = \"d!\"\n}\n1: \"This\"\n2: \" is \"\n3: \"a te\"\n4: \"st s\"\n5: \"trin\"\n6: \"g\"\n</code></pre> Notice <p>The last element (segment) of the returned array could be less than the desired segment length. This could happend because of a short input string.</p>"},{"location":"Modules/MainModule/#longestword","title":"LongestWord","text":""},{"location":"Modules/MainModule/#longestword-purpose","title":"Purpose","text":"<p>Returns the longest word in the input string, along with the number of characters in that word.</p>"},{"location":"Modules/MainModule/#longestword-syntax","title":"Syntax","text":"<p><code>LongestWord(Str: string): (string, number)</code></p>"},{"location":"Modules/MainModule/#longestword-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to get the longest word from.</li> </ul>"},{"location":"Modules/MainModule/#longestword-returns","title":"Returns","text":"<ul> <li>string  The longest word found in the string.</li> <li>number  The total number of characters in the found word.</li> </ul>"},{"location":"Modules/MainModule/#longestword-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local LongestWord, Characters = StringPlus.LongestWord(\"The quick brown fox jumps over the lazy dog\")\nprint(LongestWord, Characters\n\nlocal LongestWord, Characters = StringPlus.LongestWord(\"Some text to check for the longest word...\")\nprint(LongestWord, Characters)\n</code></pre> <pre><code>jumps 5\nlongest 7\n</code></pre>"},{"location":"Modules/MainModule/#reversewords","title":"ReverseWords","text":""},{"location":"Modules/MainModule/#reversewords-purpose","title":"Purpose","text":"<p>This function takes a string as input and returns a new string where all the words in the original string are reversed.  The order of the words in the returned string is the same as in the original string.</p>"},{"location":"Modules/MainModule/#reversewords-syntax","title":"Syntax","text":"<p><code>ReverseWords(Str: string): string</code></p>"},{"location":"Modules/MainModule/#reversewords-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be processed.</li> </ul>"},{"location":"Modules/MainModule/#reversewords-returns","title":"Returns","text":"<ul> <li>string  The string with reversed words.</li> </ul>"},{"location":"Modules/MainModule/#reversewords-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Reversed = StringPlus.ReverseWords(\"Hello world\")\nprint(Reversed)\n\nlocal Reversed = StringPlus.ReverseWords(\"A string for testing!\")\nprint(Reversed)\n\nlocal Reversed = StringPlus.ReverseWords(\"Loren ipsun dolor\")\nprint(Reversed)\n</code></pre> <pre><code>olleH dlrow\nA gnirts rof !gnitset\nneroL nuspi rolod\n</code></pre>"},{"location":"Modules/MainModule/#camelcase","title":"CamelCase","text":""},{"location":"Modules/MainModule/#camelcase-purpose","title":"Purpose","text":"<p>Converts a string or words separated by underscores into a string in camel case format.</p>"},{"location":"Modules/MainModule/#camelcase-syntax","title":"Syntax","text":"<p><code>CamelCase(Str: string): string</code></p>"},{"location":"Modules/MainModule/#camelcase-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to be converted to camel case format.</li> </ul>"},{"location":"Modules/MainModule/#camelcase-returns","title":"Returns","text":"<ul> <li>string  The input string in camel case format.</li> </ul>"},{"location":"Modules/MainModule/#camelcase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"hello_world\"\nprint(StringPlus.CamelCase(Str))\n\nlocal Str = \"HelloWorld\"\nprint(StringPlus.CamelCase(Str))\n\nlocal Str = \"Hello_world\"\nprint(StringPlus.CamelCase(Str))\n</code></pre> <pre><code>helloWorld\nhelloWorld\nhelloWorld\n</code></pre>"},{"location":"Modules/MainModule/#snakecase","title":"SnakeCase","text":""},{"location":"Modules/MainModule/#snakecase-purpose","title":"Purpose","text":"<p>This function converts a given string to snake case, a naming convention where all spaces and punctuation are replaced with underscores, and all letters are lowercase.  If the input string is all uppercase, it will be converted to lowercase.</p>"},{"location":"Modules/MainModule/#snakecase-syntax","title":"Syntax","text":"<p><code>SnakeCase(Str: string): string</code></p>"},{"location":"Modules/MainModule/#snakecase-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to be converted to snake case.</li> </ul>"},{"location":"Modules/MainModule/#snakecase-returns","title":"Returns","text":"<ul> <li>string  The input string in snake case.</li> </ul>"},{"location":"Modules/MainModule/#snakecase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local SnakeCase = StringPlus.SnakeCase(\"ThisIsASentence\")\nprint(SnakeCase)\n\nlocal SnakeCase = StringPlus.SnakeCase(\"thisIsASentence\")\nprint(SnakeCase)\n\nlocal SnakeCase = StringPlus.SnakeCase(\"ThisIsASentence123\")\nprint(SnakeCase)\n\nlocal SnakeCase = StringPlus.SnakeCase(\"This_Is_A_Sentence\")\nprint(SnakeCase)\n\nlocal SnakeCase = StringPlus.SnakeCase(\"this_is_a_sentence\")\nprint(SnakeCase)\n</code></pre> <pre><code>this_is_a_sentence\nthis_is_a_sentence\nthis_is_a_sentence123\nthis_is_a_sentence\nthis_is_a_sentence\n</code></pre> Note <p>This function does not handle any input string that its characters are all lowercased and will return it as is.</p>"},{"location":"Modules/MainModule/#uniquewords","title":"UniqueWords","text":""},{"location":"Modules/MainModule/#uniquewords-purpose","title":"Purpose","text":"<p>Returns an array or string of unique words in a given input string.</p>"},{"location":"Modules/MainModule/#uniquewords-syntax","title":"Syntax","text":"<p><code>UniqueWords(Str: string, ReturnString: boolean?): (string | {string})</code></p>"},{"location":"Modules/MainModule/#uniquewords-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string.</li> <li><code>ReturnString: boolean</code> Optional  A boolean value indicating whether to return the unique words as a single string value or as an array of strings.  If this parameter is not provided, the default value is <code>false</code>.</li> </ul>"},{"location":"Modules/MainModule/#uniquewords-returns","title":"Returns","text":"<ul> <li>string | table  If ReturnString is <code>true</code>, the function returns a string of unique words separated by a single space character; otherwise, the function returns an array of the found unique words.</li> </ul>"},{"location":"Modules/MainModule/#uniquewords-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local UniqueWords = StringPlus.UniqueWords(\"This is a string. This is also a text.\")\nprint(UniqueWords)\n\nlocal UniqueWords = StringPlus.UniqueWords(\"This is a string. This is also a text.\", true)\nprint(UniqueWords)\n</code></pre> <pre><code>{\"string\", \"also\", \"text\"}\nstring also text\n</code></pre>"},{"location":"Modules/MainModule/#analyze","title":"Analyze","text":""},{"location":"Modules/MainModule/#analyze-purpose","title":"Purpose","text":"<p>Takes a string as an input and returns a dictionary containing various statistics about the string. </p> <p>The statistics does include the number of all characters, alphabetical characters, words, unique words, common words, shortest and longest words, average word length, vowels, consonants, digits, punctuation marks, and lines in the string.</p>"},{"location":"Modules/MainModule/#analyze-syntax","title":"Syntax","text":"<p><code>Analyze(Str: string): table</code></p>"},{"location":"Modules/MainModule/#analyze-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string to be analyzed.</li> </ul>"},{"location":"Modules/MainModule/#analyze-returns","title":"Returns","text":"<ul> <li>table  A dictionary containing the following key-value pairs:<ul> <li><code>AllCharacterCount</code>: The number of all characters in the string</li> <li><code>AlphaCharacterCount</code>: The number of alphabetical characters in the string</li> <li><code>WordCount</code>: The number of words in the string</li> <li><code>WordAppearCount</code>: A dictionary containing the frequency of each word in the string where:<ul> <li>Each key represents the word string value</li> <li>Each key value represents a number (integer) that specifies how many times the word has appeared</li> </ul> </li> <li><code>UniqueWordCount</code>: The number of unique words in the string</li> <li><code>CommonWordCount</code>: The number of common words in the string</li> <li><code>ShortestWord</code>: A dictionary containing the shortest word in the string and its length where keys are:<ul> <li><code>Word</code>: The shortest word string value</li> <li><code>Length</code>: The length of the shortest word represented as a number value</li> </ul> </li> <li><code>LongestWord</code>: A dictionary containing the longest word in the string and its length where keys are:<ul> <li><code>Word</code>: The longest word string value</li> <li><code>Length</code>: The length of the longest word represented as a number value</li> </ul> </li> <li><code>AvgWordLength</code>: The average length of words in the string</li> <li><code>VowelCount</code>: The number of vowels in the string</li> <li><code>ConsonantCount</code>: The number of consonants in the string</li> <li><code>DigitCount</code>: The number of digits in the string</li> <li><code>PunctuationCount</code>: The number of punctuation marks in the string</li> <li><code>LineCount</code>: The number of lines in the string</li> </ul> </li> </ul>"},{"location":"Modules/MainModule/#analyze-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello, world! This is a test string.\"\nlocal Stats = StringPlus.Analyze(Str)\n\nprint(Stats.WordCount)\nprint(Stats.ShortestWord.Word)\nprint(Stats.LongestWord.Word)\n\nlocal Str = \"Luau comes with a set of linting passes, that help make sure that the code is correct and consistent. Unlike the type checker, that models the behavior of the code thoroughly and points toward type mismatches that are likely to result in runtime errors, the linter is more opinionated and produces warnings that can often be safely ignored, although it\u2019s recommended to keep the code clean of the warnings.\"\nprint(\"Statics:\", StringPlus.Analyze(Str))\n</code></pre> <pre><code>7\na\nstring\nStatics: {\n    [\"AllCharacterCount\"] = 408,\n    [\"AlphaCharacterCount\"] = 331,\n    [\"AvgWordLength\"] = 4.782608695652174,\n    [\"CommonWordCount\"] = 9,\n    [\"ConsonantCount\"] = 208,\n    [\"DigitCount\"] = 0,\n    [\"LineCount\"] = 1,\n    [\"LongestWord\"] = {...},\n    [\"PunctuationCount\"] = 6,\n    [\"ShortestWord\"] = {...},\n    [\"UniqueWordCount\"] = 40,\n    [\"VowelCount\"] = 123,\n    [\"WordAppearCount\"] = {...},\n    [\"WordCount\"] = 69\n}\n</code></pre>"},{"location":"Modules/MainModule/#expand","title":"Expand","text":""},{"location":"Modules/MainModule/#expand-purpose","title":"Purpose","text":"<p>The StringPlus.Expand function takes in a string and a table of replacements (called <code>Subset</code>) and returns a new string with the specified replacements made.  The function uses the pattern <code>\"%${([%w_ %.%(#%)]+)\"</code> which is similar to javascript string interpolation syntax to identify which substrings in the input string should be replaced. </p> <p>The Subset table should contain keys that match the substrings to be replaced and values that are the desired replacements. In addition to simple string replacements, the function also supports nested table keys and table numeric indices (TNI) in the Subset table.</p>"},{"location":"Modules/MainModule/#expand-syntax","title":"Syntax","text":"<p><code>Expand(Str: string, Subset: table): string</code></p>"},{"location":"Modules/MainModule/#expand-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to expand.</li> <li><code>Subset: table</code>  A table containing the values that will be used to expand the string.</li> </ul>"},{"location":"Modules/MainModule/#expand-returns","title":"Returns","text":"<ul> <li>string  The expanded string.</li> </ul>"},{"location":"Modules/MainModule/#expand-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Subset = {\n    Name = \"John\",\n    Mood = \"good\",\n    [1] = \"apple\",\n    [2] = \"banana\",\n    [3] = \"orange\"\n}\n\nlocal Str = \"Hello ${Name}, how are you? I hope you're having a ${Mood} day. Here's a list of items: ${(#1)}, ${(#2)}, ${(#3)}.\"\nlocal ExpandedStr, Replacements = StringPlus.Expand(Str, Subset)\nprint(ExpandedStr)\n\nlocal Subset = {\n    [\"Name\"] = \"John\",\n    [\"Age\"] = 25,\n    [\"Achievements\"] = {\n        \"Graduated with honors\",\n        \"Won a medal in a science fair\",\n        \"Became a black belt in karate\"\n    },\n    [\"Hobbies\"] = {\n        \"Swimming\",\n        \"Running\",\n        \"Reading\"\n    },\n    [\"Location\"] = \"New York\"\n}\n\nlocal StringToExpand = \"My name is ${Name} and I am ${Age} years old. I am from ${Location} and I enjoy ${Hobbies.1} and ${Hobbies.3}. Some of my achievements include: ${Achievements.1}, ${Achievements.2}, and ${Achievements.3}. I have also completed the marathon in 3 hours!\"\nlocal ExpandedString = StringPlus.Expand(StringToExpand, Subset)\nprint(ExpandedString)\n</code></pre> <pre><code>Hello John, how are you? I hope you're having a good day. Here's a list of items: apple, banana, orange.\nMy name is John and I am 25 years old. I am from New York and I enjoy Swimming and Reading. Some of my achievements include: Graduated with honors, Won a medal in a science fair, and Became a black belt in karate. I have also completed the marathon in 3 hours!\n</code></pre> <p>String Interpolation</p> <p>String interpolation has been supported in Luau release 0.542 and has been implemented on the Roblox platform on January 5 2023.  It is strongly recommended to use string interpolation instead of this function.</p> <p>Note</p> <p>Anything is not found in the given <code>Subset</code> table would be replaced with the <code>-nil-</code> text.</p> <p>Failure</p> <p>This function does not support any mathematical operation in the given string and will return them without any calculations.  Also, the function does not support execution of functions.</p>"},{"location":"Modules/MainModule/#distort","title":"Distort","text":""},{"location":"Modules/MainModule/#distort-purpose","title":"Purpose","text":"<p>The <code>Distort</code> function takes a string, a percentage, and an optional set of replacement characters and returns the distorted string by replacing characters in the original string with characters from the array of replacement characters. </p> <p>This function could be useful for simulating low signal transmission for games that has radio chats.</p>"},{"location":"Modules/MainModule/#distort-syntax","title":"Syntax","text":"<p><code>Distort(Str: string, Percentage: number, ReplacementChars: {string}?): string</code></p>"},{"location":"Modules/MainModule/#distort-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be distorted.</li> <li><code>Percentage: boolean</code>  The percentage of characters to replace in the string. Must be between <code>0</code> and <code>100</code>.</li> <li><code>ReplacementChars: table</code> Optional  An array of characters/strings to replace the characters in the original string with. The default value is <code>{\"#\", \"$\", \"@\", \"&amp;\"}</code>.</li> </ul>"},{"location":"Modules/MainModule/#distort-returns","title":"Returns","text":"<ul> <li>string  A modified version of the original string, where a specified percentage of characters are substituted with characters from a designated array of replacement characters.</li> </ul>"},{"location":"Modules/MainModule/#distort-examples","title":"Examples","text":"Code SampleExample Output 1Example Output 2 <pre><code>local DistortedString = StringPlus.Distort(\"Hello\", 85)\nprint(DistortedString)\n\nlocal DistortedString = StringPlus.Distort(\"Hello Luau\", 38, {\"#\", \"*\"})\nprint(DistortedString)\n\nlocal DistortedString = StringPlus.Distort(\"E\", 20)\nprint(DistortedString)\n\nlocal DistortedString = StringPlus.Distort(\"Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua.\", 12)\nprint(DistortedString)\n</code></pre> <pre><code>&amp;#l&amp;&amp;\nHe#l* ##au\nE\nLorem@ipsum d@lor sit amet,@consect#$ur adipis#i e&amp;i&amp;, sed eiusmod tempor inc#du#t u&amp;&amp;labor# et dolore mag@a aliqua.\n</code></pre> <pre><code>###l#\nHe*lo *u*#\n#\nLore$ ipsum d@l#r sit ame#,&amp;co&amp;&amp;e#tetur adipisci elit, sed eiusmod $empor incidu#t #t labore et $@lor&amp; magna aliqua.\n</code></pre>"},{"location":"Modules/MainModule/#titlecase","title":"TitleCase","text":""},{"location":"Modules/MainModule/#titlecase-purpose","title":"Purpose","text":"<p>Converts the input string to title case, following the English title case rules.  The first character of the first word and the first character of any word after a space are always capitalized.  Any character after a hyphen (-) is always lower-cased.</p> <p>If the <code>Strict</code> parameter is set to true, the function will lower-case any word that is not considered a proper noun.  If the <code>Strict</code> parameter is set to false or not provided, the function will apply title case to all words in the input string.</p>"},{"location":"Modules/MainModule/#titlecase-syntax","title":"Syntax","text":"<p><code>TitleCase(Str: string, Strict: boolean?): string</code></p>"},{"location":"Modules/MainModule/#titlecase-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to be converted to title case.</li> <li><code>Strict: boolean</code>  A boolean value indicating whether the function should strictly follow the English title case rules or not.  If set to true, the function will lower-case any word that is not considered a proper noun.  If set to false or not provided, the function will apply title case to all words in the input string.</li> </ul>"},{"location":"Modules/MainModule/#titlecase-returns","title":"Returns","text":"<ul> <li>string  The input string in title case.</li> </ul>"},{"location":"Modules/MainModule/#titlecase-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"this is an example title\"\nlocal AppliedTitleCase = StringPlus.TitleCase(Str, true)\nprint(AppliedTitleCase)\n\nlocal AppliedTitleCase = StringPlus.TitleCase(Str, false)\nprint(AppliedTitleCase)\n\nlocal AppliedTitleCase = StringPlus.TitleCase(\"the quick BROWN fox\")\nprint(AppliedTitleCase)\n</code></pre> <pre><code>This Is an Example Title\nThis Is An Example Title\nThe Quick Brown Fox\n</code></pre>"},{"location":"Modules/MainModule/#lines","title":"Lines","text":""},{"location":"Modules/MainModule/#lines-purpose","title":"Purpose","text":"<p>Used to split a given string into a list of lines, where each element in the returned array or each returned tuple element is a string representing a single line.</p> <p>If the <code>Strict</code> parameter is set to true, the function will lower-case any word that is not considered a proper noun.  If the <code>Strict</code> parameter is set to false or not provided, the function will apply title case to all words in the input string.</p>"},{"location":"Modules/MainModule/#lines-syntax","title":"Syntax","text":"<p><code>Lines(Str: string, KeepEnds: boolean?, ReturnAsATuple: boolean?): (...string | {string}))</code></p>"},{"location":"Modules/MainModule/#lines-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to return its lines.</li> <li><code>KeepEnds: boolean</code> Optional: A boolean value indicating whether to keep the line endings3 in the returned strings.  The default value is <code>false</code>.</li> <li><code>ReturnAsATuple: boolean</code> Optional  A boolean value indicating whether to return the lines as a tuple.  The default value is <code>false</code>.</li> </ul>"},{"location":"Modules/MainModule/#lines-returns","title":"Returns","text":"<ul> <li>table | tuple  An array of strings representing the lines in the input string, or a tuple of strings representing the lines if the <code>ReturnAsATuple</code> parameter is set to <code>true</code>. Each element in the array/tuple represents a single line in the input string, and includes the line ending characters if the <code>KeepEnds</code> parameter is set to <code>true</code>.  If the input string does not contain more than one line, the function will return a array/tuple with a single element representing the input string.</li> </ul>"},{"location":"Modules/MainModule/#lines-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Text = \"This is a multi-line string\\r\\nThis is the second line\\nThis is the third line\\rThis is the fourth line\"\n\nprint(StringPlus.Lines(Text))\nprint(StringPlus.Lines(Text, true))\nprint(StringPlus.Lines(Text, false, true))\n</code></pre> <pre><code>{\"This is a multi-line string\", \"This is the second line\", \"This is the third line\", \"This is the fourth line\"}\n{\"This is a multi-line string\\r\\n\", \"This is the second line\\n\", \"This is the third line\\r\", \"This is the fourth line\"}\nThis is a multi-line string, This is the second line, This is the third line, This is the fourth line\n</code></pre>"},{"location":"Modules/MainModule/#rfind","title":"RFind","text":""},{"location":"Modules/MainModule/#rfind-purpose","title":"Purpose","text":"<p>Returns the starting and ending indices of the last occurrence of the <code>Sub</code> string within the input string, searching backwards from the optional <code>End</code> index to the optional <code>Start</code> index. If <code>Sub</code> is not found within the specified range, the function returns <code>nil</code> for both indices.</p>"},{"location":"Modules/MainModule/#rfind-syntax","title":"Syntax","text":"<p><code>RFind(Str: string, Sub: string, Start: number?, End: number?): (number?, number?))</code></p>"},{"location":"Modules/MainModule/#rfind-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string in which the search will take place.</li> <li><code>Sub: string</code>  The substring to be searched for.</li> <li><code>Start: number</code> Optional  The starting position of the search.  Defaults to the first character in the string from backwards.</li> <li><code>End: number</code> Optional  The ending position of the search.  Defaults to the length of the string.</li> </ul>"},{"location":"Modules/MainModule/#rfind-returns","title":"Returns","text":"<ul> <li>number  The starting position of the found substring, or <code>nil</code> if not found.</li> <li>number  The ending position of the found substring, or <code>nil</code> if not found.</li> </ul>"},{"location":"Modules/MainModule/#rfind-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"The quick brown fox jumps over the lazy dog.\"\nlocal Sub = \"the\"\n\n-- Find the last occurrence of \"the\" within the string:\nlocal Start, End = StringPlus.RFind(Str, Sub)\nprint(Start, End)\n\n-- Find the last occurrence of \"the\" within the first half of the string (not found):\nlocal Start, End = StringPlus.RFind(Str, Sub, 1, #Str / 2)\nprint(Start, End)\n\n-- Find the last occurrence of \"fox\" within the string:\nlocal Start, End = StringPlus.RFind(Str, \"fox\")\nprint(Start, End)\n\n-- Find the last occurrence of \"cat\" within the string (not found):\nlocal Start, End = StringPlus.RFind(Str, \"cat\")\nprint(Start, End)\n</code></pre> <pre><code>32 34\nnil nil\n17 19\nnil nil\n</code></pre>"},{"location":"Modules/MainModule/#partition","title":"Partition","text":""},{"location":"Modules/MainModule/#partition-purpose","title":"Purpose","text":"<p>Takes in an input string, a separator string, and returns a tuple or an array (depending on the value of <code>ReturnAsArray</code>) representing the three partitioned parts of the input string.</p>"},{"location":"Modules/MainModule/#partition-syntax","title":"Syntax","text":"<p><code>Partition(Str: string, Separator: string, ReturnAsArray: boolean?): (...string | {string})</code></p>"},{"location":"Modules/MainModule/#partition-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to be partitioned.</li> <li><code>Sub: string</code>  The separator string used to partition Str.</li> <li><code>ReturnAsArray: boolean</code> Optional  A boolean value that specifies whether the function should return the resulting partition as an array or as a tuple.  If it is not provided or is <code>nil</code>, the function returns a tuple.</li> </ul>"},{"location":"Modules/MainModule/#partition-returns","title":"Returns","text":"<ul> <li>string  The first element is the substring of Str before the first occurrence of <code>Separator</code> or <code>nil</code> if it doesn't exist.</li> <li>string  The second element is the substring of Str between the first occurrence of <code>Separator</code> and the last occurrence of <code>Separator</code> or <code>nil</code> if it doesn't exist.</li> <li>string  The third element is the substring of Str after the last occurrence of <code>Separator</code> or <code>nil</code> if it doesn't exist.</li> </ul>"},{"location":"Modules/MainModule/#partition-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello, World!\"\nlocal p1, p2, p3 = StringPlus.Partition(Str, \"|\")\nprint(p1)\nprint(p2)\nprint(p3)\nprint(\"-----\")\n\nlocal Part = StringPlus.Partition(Str, \"|\", true)\nprint(Part)\nprint(\"-----\")\n\n\nlocal Str = \"Hello, World! How are you doing today?\"\nlocal p1, p2, p3 = StringPlus.Partition(Str, \", \")\nprint(p1)\nprint(p2)\nprint(p3)\nprint(\"-----\")\n\nlocal Parts = StringPlus.Partition(Str, \", \", true)\nprint(Parts)\n</code></pre> <pre><code>Hello, World!\nnil\nnil\n-----\nHello, World!\n-----\nHello\n, \nWorld! How are you doing today?\n-----\n{\"Hello\", \", \", \"World! How are you doing today?\"}\n</code></pre>"},{"location":"Modules/MainModule/#rpartition","title":"RPartition","text":""},{"location":"Modules/MainModule/#rpartition-purpose","title":"Purpose","text":"<p>Returns a tuple or an array containing three strings; The part of the string before the first occurrence of the separator, the separator string itself, and the part of the string after the separator.  If the separator is not found in the string, the entire string is returned.</p>"},{"location":"Modules/MainModule/#syntax","title":"Syntax","text":"<p><code>RPartition(Str: string, Separator: string, ReturnAsArray: boolean?): (...string | {string})</code></p>"},{"location":"Modules/MainModule/#rpartition-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The original string that needs to be partitioned.</li> <li><code>Sub: string</code>  A string value that represents the boundary between the first and second substrings.</li> <li><code>ReturnAsArray: boolean</code> Optional  A boolean value that determines whether the function should return the three substrings as an array or as a tuple. The default value for this input is <code>false</code> which mean that the function will return a tuple containing three string values.</li> </ul>"},{"location":"Modules/MainModule/#rpartition-returns","title":"Returns","text":"<ul> <li>string  The first substring of <code>Str</code> before the first occurrence of <code>Separator</code> or <code>nil</code> if it doesn't exist.</li> <li>string  The second substring of <code>Str</code> if it exist.</li> <li>string  The third substring of <code>Str</code> after the last occurrence of <code>Separator</code> or <code>nil</code> if it doesn't exist.</li> </ul>"},{"location":"Modules/MainModule/#rpartition-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Str = \"Hello, World!\"\n\n-- Separate the Str into three parts, using the space character as the separator\nlocal left, separator, right = StringPlus.RPartition(Str, \" \")\nprint(left)\nprint(separator)\nprint(right)\nprint(\"------\")\n\n-- Separate the Str into three parts, using the comma character as the separator, and get an array of parts\nlocal parts =  StringPlus.RPartition(Str, \",\", true)\nprint(parts[1])\nprint(parts[2])\nprint(parts[3])\nprint(\"------\")\n\n-- If the separator is not found, the original Str is returned as the left part and the right part is an empty Str\nlocal left, separator, right =  StringPlus.RPartition(Str, \"?\")\nprint(left)\nprint(separator)\nprint(right)\nprint(\"------\")\n\n-- Separate the Str into three parts, using the word \"bananas\" as the separator.\nlocal Str = \"I could eat bananas all day, bananas are my favorite fruit.\"\nlocal left, separator, right =  StringPlus.RPartition(Str, \"bananas\")\nprint(left)\nprint(separator)\nprint(right)\n</code></pre> <pre><code>Hello,\n\nWorld!\n------\nHello\n,\n World!\n------\nHello, World!\nnil\nnil\n------\nI could eat bananas all day, \nbananas\n are my favorite fruit.\n</code></pre>"},{"location":"Modules/MainModule/#binaryencode","title":"BinaryEncode","text":""},{"location":"Modules/MainModule/#binaryencode-purpose","title":"Purpose","text":"<p>Takes in a string and returns its binary encoding, where each character is represented as an 8-bit binary string, separated by a space as a default.</p>"},{"location":"Modules/MainModule/#binaryencode-syntax","title":"Syntax","text":"<p><code>BinaryEncode(Str: string, Delimiter: string?): string</code></p>"},{"location":"Modules/MainModule/#binaryencode-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be encoded.</li> <li><code>Delimiter: string</code> Optional  A string represents the separator to be used between every Byte of the output binary. Default value is a space.</li> </ul>"},{"location":"Modules/MainModule/#binaryencode-returns","title":"Returns","text":"<ul> <li>string  The binary encoded string, with each Byte being separated by a <code>Delimiter</code>.</li> </ul>"},{"location":"Modules/MainModule/#binaryencode-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local BinaryEncodedString = StringPlus.BinaryEncode(\"Hello, World!\")\nprint(BinaryEncodedString)\n\nlocal BinaryEncodedString = StringPlus.BinaryEncode(\"Test!\", \"-\")\nprint(BinaryEncodedString)\n\nlocal BinaryEncodedString = StringPlus.BinaryEncode(\"Hello, \u4e16\u754c!\")\nprint(BinaryEncodedString)\n\nlocal BinaryEncodedString = StringPlus.BinaryEncode(\"\")\nprint(BinaryEncodedString)\n</code></pre> <pre><code>01001000 01100101 01101100 01101100 01101111 00101100 00100000 01010111 01101111 01110010 01101100 01100100 00100001\n01010100-01100101-01110011-01110100-00100001\n01001000 01100101 01101100 01101100 01101111 00101100 00100000 11100111 10111010 11100111 11101111 11100111 01100001\n</code></pre>"},{"location":"Modules/MainModule/#binarydecode","title":"BinaryDecode","text":""},{"location":"Modules/MainModule/#binarydecode-purpose","title":"Purpose","text":"<p>This function takes in a single parameter Encoded which is a string.  It converts this value to a string, removes any non-binary character from it, and processes each 8-bit binary sequence.  It converts each sequence to a number and then converts this number to its corresponding ASCII character. The resulting string is returned.</p>"},{"location":"Modules/MainModule/#binarydecode-syntax","title":"Syntax","text":"<p><code>BinaryDecode(Encoded: string): string</code></p>"},{"location":"Modules/MainModule/#binarydecode-parameters","title":"Parameters","text":"<ul> <li><code>Encoded: string</code>  The binary string to be decoded.</li> </ul>"},{"location":"Modules/MainModule/#binarydecode-returns","title":"Returns","text":"<ul> <li>string  A string representing the decoded binary.</li> </ul>"},{"location":"Modules/MainModule/#binarydecode-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Encoded = \"01001000 01100101 01101100 01101100 01101111\"\nlocal DecodedStr = StringPlus.BinaryDecode(Encoded)\nprint(DecodedStr)\n\nlocal Encoded = \"01001000-5-01100101-5-01101100-5-01101100-5-01101111-5-00100001-5-00100000-5-01010100-5-01101000-5-01101001-5-01110011-5-00100000-5-01110111-5-01100001-5-01110011-5-00100000-5-01100001-5-00100000-5-01100111-5-01110010-5-01100101-5-01100101-5-01110100-5-01101001-5-01101110-5-01100111\"\nlocal DecodedStr = StringPlus.BinaryDecode(Encoded)\nprint(DecodedStr)\n</code></pre> <pre><code>Hello\nHello! This was a greeting\n</code></pre>"},{"location":"Modules/MainModule/#hexencode","title":"HexEncode","text":""},{"location":"Modules/MainModule/#hexencode-purpose","title":"Purpose","text":"<p>This function takes a string as an input and returns a string of hexadecimal characters representing the input string.  If the input string is empty, the function simply returns nil.</p>"},{"location":"Modules/MainModule/#hexencode-syntax","title":"Syntax","text":"<p><code>HexEncode(Str: string): string</code></p>"},{"location":"Modules/MainModule/#hexencode-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string value to be encoded in hexadecimal.</li> </ul>"},{"location":"Modules/MainModule/#hexencode-returns","title":"Returns","text":"<ul> <li>string  A string of hexadecimal characters representing the input string.</li> </ul>"},{"location":"Modules/MainModule/#hexencode-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(StringPlus.HexEncode(\"Hello, World!\"))\nprint(StringPlus.HexEncode(\"abc123\"))\nprint(StringPlus.HexEncode(\"\"))\n</code></pre> <pre><code>48656c6c6f2c20576f726c6421\n616263313233\nnil\n</code></pre>"},{"location":"Modules/MainModule/#hexdecode","title":"HexDecode","text":""},{"location":"Modules/MainModule/#hexdecode-purpose","title":"Purpose","text":"<p>This function takes a single string argument HexStr which represents a string of hexadecimal digits. If HexStr does not contain only hexadecimal digits (i.e. it contains any characters other than 0-9, a-f, and A-F), the function returns nil. Otherwise, it returns a string containing the decoded version of HexStr.</p> <p>The decoding is done by replacing each pair of hexadecimal digits with the corresponding ASCII character. For example, the string <code>\"41 42 43\"</code> (which represents the hexadecimal digits \"ABC\") would be decoded as the string \"ABC\".</p>"},{"location":"Modules/MainModule/#hexdecode-syntax","title":"Syntax","text":"<p><code>HexDecode(HexStr: string): string?</code></p>"},{"location":"Modules/MainModule/#hexdecode-parameters","title":"Parameters","text":"<ul> <li><code>HexStr: string</code>  The input string containing hexadecimal characters/digits (0-9, a-f, A-F).</li> </ul>"},{"location":"Modules/MainModule/#hexdecode-returns","title":"Returns","text":"<ul> <li>string  The decoded string if the <code>HexStr</code> parameter is a valid string of hexadecimal characters/digits.</li> </ul>"},{"location":"Modules/MainModule/#hexdecode-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Decoded = StringPlus.HexDecode(\"48656c6c6f20576f726c64\")\nprint(Decoded)\n\nlocal UpperCaseHex = StringPlus.HexDecode(\"48656C6C6F20576F726C64\")\nprint(UpperCaseHex)\n\nlocal UpperCaseHex = StringPlus.HexDecode(\"48656c6c6f20526f626c6f7821\")\nprint(UpperCaseHex)\n\nlocal InvalidHex = StringPlus.HexDecode(\"48656c6c6f207$726c64\")\nprint(InvalidHex)\n</code></pre> <pre><code>Hello World\nHello World\nHello Roblox!\nnil\n</code></pre> <ol> <li> <p>Excluding the \"[Extended] - \" part of it\u00a0\u21a9</p> </li> <li> <p>Equivalent to ( \\t\\n\\v\\f\\r).\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Line endings are the <code>\\n</code> and <code>\\r</code> characters.\u00a0\u21a9</p> </li> </ol>"},{"location":"Modules/Random/","title":"Random Sub-Module Documentation","text":""},{"location":"Modules/Random/#overview","title":"Overview","text":"<p>The Random sub-library is a collection of functions structured and designed to generate random strings. </p> <p>Filtering Results</p> <p>It is strongely recommended to filter any outputs from the library\u2019s Random and GenerateKey  functions as they can return a string that contains inappropriate words. For additional info: here or here.</p>"},{"location":"Modules/Random/#functions","title":"Functions","text":""},{"location":"Modules/Random/#random","title":"Random","text":""},{"location":"Modules/Random/#random-purpose","title":"Purpose","text":"<p>Generates a random string of a specified length and an optional character set.</p> <p>The function uses the <code>math.random</code> function to generate random characters from the specified character set, and returns the generated string as the final result.  The function also caches the characters from a specific character set for faster generation in future calls.</p>"},{"location":"Modules/Random/#random-syntax","title":"Syntax","text":"<p><code>Random(Length: number?, CharSet: string?): string</code></p>"},{"location":"Modules/Random/#random-parameters","title":"Parameters","text":"<ul> <li><code>Length: number</code> Optional  The length of the string to generate.  If not specified or <code>nil</code>, the default value is <code>20</code> characters.</li> <li><code>CharSet: string</code> Optional  The character set to use for generating the string which could be a Lua string pattern.  If not specified or <code>nil</code>, the default value is <code>\"[%w]\"</code>, which represents any alphanumeric character1.</li> </ul>"},{"location":"Modules/Random/#random-returns","title":"Returns","text":"<ul> <li>string  The generated random string.</li> </ul>"},{"location":"Modules/Random/#random-examples","title":"Examples","text":"Code SampleExample Output <pre><code>local RandomString = String.Random(10, \"[%d]\")     -- Generate a random string of length 10 with only digits\nprint(RandomString)\n\nlocal RandomString2 = String.Random(15)            -- Generate a random string of length 15 with any alphanumeric character\nprint(RandomString2)\n\nlocal RandomString3 = String.Random(5, \"[%l%u]\")   -- Generate a random string of length 5 with only lowercase and uppercase letters (equivalent to \"%a\")\nprint(RandomString3)\n\nlocal RandomString4 = String.Random(12, \"[Aabcd01]\")   -- Generate a random string of length 12 that only contains any of characters: A,a,b,c,d,0,1\nprint(RandomString4)\n</code></pre> <pre><code>2785220038\n4q3m8z9k1p7c6t5\nFjKpZ\n10AbbbAdb1db\n</code></pre>"},{"location":"Modules/Random/#randomfromstring","title":"RandomFromString","text":""},{"location":"Modules/Random/#randomfromstring-purpose","title":"Purpose","text":"<p>Used to create a randomized string based on an input one's characters.</p>"},{"location":"Modules/Random/#randomfromstring-syntax","title":"Syntax","text":"<p><code>RandomFromString(Str: string, Length: number?, SameCharacterChances: boolean?): string</code></p>"},{"location":"Modules/Random/#randomfromstring-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string.</li> <li><code>Length: number</code> Optional  The number of characters of the output random string.   Default: <code>10</code></li> <li><code>SameCharacterChances: boolean</code> Optional  A boolean determines whether the function should not allow for the repeated characters (higher chances) to exist based on that, but to make the chance of every character to appear the same.   Default: <code>true</code>.</li> </ul>"},{"location":"Modules/Random/#randomfromstring-returns","title":"Returns","text":"<ul> <li>string  The output random string.</li> </ul>"},{"location":"Modules/Random/#randomfromstring-examples","title":"Examples","text":"Code SampleExample Output <pre><code>local Str = \"A string\"\nprint(String.RandomFromString(Str))\n\nlocal Str = \"Hello World!\"\nprint(String.RandomFromString(Str, 10))\n\nlocal Str = \"This string for testing\"\nprint(String.RandomFromString(Str, 15, false))\n\nlocal Str = \"-StringPlus-\"\nprint(String.RandomFromString(Str, 6))\n\nlocal Str = \"123abc\"\nprint(String.RandomFromString(Str, 18))\n</code></pre> <pre><code>stsAnAtnrg\nWeedld !W \nhTTgshTneesrhtf\nilrn-l\n3aac1a11ba32112a2a\n</code></pre>"},{"location":"Modules/Random/#generate","title":"Generate","text":""},{"location":"Modules/Random/#generate-purpose","title":"Purpose","text":"<p>Generates a randomized string key with a specified number of sections, each with a specified length. It takes in a table which can contain several options.</p>"},{"location":"Modules/Random/#generate-syntax","title":"Syntax","text":"<p><code>GenerateKey(Options: {CharSet: (string | {string})?, TotalSections: number?, SectionLength: number?, Delimiter: string?, Prefix: string?, Suffix: string?}): string</code></p>"},{"location":"Modules/Random/#generate-parameters","title":"Parameters","text":"<ul> <li><code>Options: table</code> Optional  A table of options that specifies how would the returned string is structured.  These options are:<ul> <li><code>CharSet: (string | {string})</code> Optional   The character set to use for generating the string which could be a Lua string pattern.  If not specified or <code>nil</code>, the default value is <code>\"[%w]\"</code>, which represents any alphanumeric character1.<ul> <li>If a table is provided, each element of the table corresponds to a section of the key and specifies the character set for that section.</li> <li>If a single string is provided, all sections of the key will use the same character set.</li> <li>If the number of sets in the table is less than the <code>TotalSections</code>, they will be repeated until the table length matches the <code>TotalSections</code>.  Also, if CharSet is not provided or is <code>nil</code>, all sections of the key will use any alphanumeric character as the character set.</li> </ul> </li> <li><code>TotalSections: number</code> Optional  The total number of sections in the returned random string.   Default value is <code>4</code>.</li> <li><code>SectionLength: number</code> Optional  The length of each section in the key.   Default: <code>4</code>.</li> <li><code>Delimiter: string</code> Optional  The delimiter used to separate the sections.   Default: <code>\"-\"</code>.</li> <li><code>Prefix: string</code> Optional  The prefix to use for the key.    Default: <code>nil</code>  If the prefix length is less than the specified section length, it will be padded with random characters from the character set.  Also, if the prefix length is greater than the section length, it will be truncated.</li> <li><code>Suffix: string</code> Optional  The suffix to use for the key.    Default: <code>nil</code>  If the suffix length is less than the specified section length, it will be padded with random characters from the character set.  If the suffix length is greater than the section length, it will be truncated.</li> </ul> </li> </ul>"},{"location":"Modules/Random/#generate-returns","title":"Returns","text":"<ul> <li>string  The generated random string with the applied options.</li> <li>table  The orignally generated sections of the returned string in an array.</li> </ul>"},{"location":"Modules/Random/#generate-examples","title":"Examples","text":"Code SampleExample Output <pre><code>-- Generate a random string whith default settings\nlocal Generated, Sections = String.Generate()\nprint(Generated, Sections)\n\n-- Generate a random license plate string where it has to be two sections with the length of three characters\n-- where also, the first section should only consist upper case characters and the second one only digits\nlocal Generated, Sections = String.Generate({\n    CharSet = {[1] = \"%u\", [2] = \"%d\"}, \n    SectionLength = 3,\n    TotalSections = 2,\n})\nprint(Generated, Sections)\n\n-- Generate a key with 5 sections, each of length 8, using any alphanumeric character as the character set, with a prefix and suffix\nlocal Generated, Sections = String.Generate({\n    TotalSections = 5,\n    SectionLength = 8,\n    Prefix = \"PREFIX\",\n    Suffix = \"SUFFIX\"\n})\nprint(Generated, Sections)\n\n-- Generate a random phone number string with 4 sections, each of length 4, using any numeric character as the character set, and with a prefix\nlocal Generated, Sections = String.Generate({\n    SectionLength = 3,\n    Delimiter = \" \",\n    CharSet = \"%d\", \n    Prefix = \"+15\",\n})\nprint(Generated, Sections)\n\n-- Generate a random string with 3 sections of 4 characters each, using a different character set using pattern classes for each section\nlocal Generated = String.Generate({\n    CharSet = {\"[%d]\", \"[%l]\", \"[%u]\"},\n    TotalSections = 3,\n    SectionLength = 4\n})\nprint(Generated)\n\n-- Generate a random string of binary representation with 6 sections of 8 characters each, using a character set consisting of zeros and ones for each section and with a delimiter space character\nlocal Generated = String.Generate({\n    Delimiter = \" \",\n    CharSet = \"[01]\",\n    TotalSections = 6,\n    SectionLength = 8\n})\nprint(Generated)\n</code></pre> <pre><code>vdbx-X4Jq-mbDQ-XwRZ {\n                [1] = \"vdbx\",\n                [2] = \"X4Jq\",\n                [3] = \"mbDQ\",\n                [4] = \"XwRZ\"\n             }\nSTE-526 {\n           [1] = \"STE\",\n           [2] = \"526\"\n        }\nPREFIXcD-kQo67EgZ-ZOQjfP67-eM4RziCb-u8SUFFIX {\n                [1] = \"Mccx76cD\",\n                [2] = \"kQo67EgZ\",\n                [3] = \"ZOQjfP67\",\n                [4] = \"eM4RziCb\",\n                [5] = \"NLBhAAXN\"\n             }\n+15 757 229 515 {\n                [1] = \"145\",\n                [2] = \"757\",\n                [3] = \"229\",\n                [4] = \"515\"\n             }\n1148-zbms-CKTK\n01110101 00000000 11000110 10111010 10110111 11011100\n</code></pre> A Second Return?! Why? <p>The main purpose of the second return, also known as the generated sections is to make the function flexible and easily interactable with its output string.  An example for its usage, you can filter a specific alphabetic section, such as the text portion of a generated license plate to display to others and to prevent the display of inappropriate content.</p> <ol> <li> <p>Alphanumeric characters are: a-z, A-Z, 0-9\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Modules/Stringify/","title":"Stringify Sub-Module Documentation","text":""},{"location":"Modules/Stringify/#overview","title":"Overview","text":"<p>The Stringify sub-module consists of one function that converts a given table into a string value, similar to how tables are printed in Roblox Studio.</p>"},{"location":"Modules/Stringify/#functions","title":"Functions","text":""},{"location":"Modules/Stringify/#stringify","title":"Stringify","text":""},{"location":"Modules/Stringify/#stringify-purpose","title":"Purpose","text":"<p>Converts a given table to a good-looking string representation.</p>"},{"location":"Modules/Stringify/#stringify-syntax","title":"Syntax","text":"<p><code>Stringify(Table: table, TabSize: number?, IndentionCharacter: string?, IsRecursive: boolean?, Cache: table?, CIndention: number?): boolean</code></p>"},{"location":"Modules/Stringify/#stringify-purpose","title":"Parameters","text":"<ul> <li><code>Table: string</code>  The input table to convert.</li> <li><code>IndentionSize: number</code> Optional The size of the indentation in spaces/provided character if any.   Default is <code>4</code>.</li> <li><code>IndentionCharacter: string</code> Optional  The character to use for indentation.   Default is a space character <code>\" \"</code>.</li> <li><code>Recursive: boolean</code> Optional  A boolean indicating whether to recursively process nested tables.   Default is <code>false</code>.</li> <li><code>Cache: table</code> Optional  A table to use as a cache to detect circular references1 (Used by the function's recursive calls).</li> <li><code>CIndention: number</code> Optional  The current level of indentation (Used by the function's recursive calls).</li> </ul>"},{"location":"Modules/Stringify/#stringify-returns","title":"Returns","text":"<ul> <li>string  The string representation of the given table.</li> </ul>"},{"location":"Modules/Stringify/#stringify-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Table = {\n    Name = \"John\",\n    Age = 30,\n    Hobbies = {\"Reading\", \"Swimming\", \"Cooking\"},\n    Address = {\n        Street = \"123 Main Street\",\n        City = \"New York\",\n        State = \"NY\",\n        Zip = \"10001\"\n    }\n}\nprint(Stringify(Table))    -- Recursive parameter is not on/true\n\nlocal Table = {\n    [\"Item 1\"] = 123,\n    [\"Item 2\"] = \"Hello, world!\",\n    [\"Item 3\"] = true,\n    [\"Item 4\"] = {\n        [\"Subitem 1\"] = \"Nested value\",\n        [\"Subitem 2\"] = false\n    },\n    [\"Item 5\"] = {\n        [1] = \"Array item 1\",\n        [2] = \"Array item 2\",\n        [3] = \"Array item 3\"\n    }\n}\nprint(Stringify(Table, 4, \" \", true))\n\nlocal Table = { {1}, {2} }\nprint(String.Stringify(Table, nil, \"-\", true))\n</code></pre> <pre><code>{\n    [\"Address\"] = table: 0x8721c752aabb7911,\n    [\"Age\"] = 30,\n    [\"Name\"] = \"John\",\n    [\"Hobbies\"] = table: 0x497b292a40db2041\n}\n{\n    [\"Item 1\"] = 123,\n    [\"Item 2\"] = \"Hello, world!\",\n    [\"Item 5\"] = {\n        [1] = \"Array item 1\",\n        [2] = \"Array item 2\",\n        [3] = \"Array item 3\"\n    },\n    [\"Item 4\"] = {\n        [\"Subitem 2\"] = false,\n        [\"Subitem 1\"] = \"Nested value\"\n    },\n    [\"Item 3\"] = true\n}\n{\n----[\"1\"] = {\n--------[1] = 1\n----},\n----[\"2\"] = {\n--------[1] = 2\n----}\n}\n</code></pre> <ol> <li> <p>Circular reference is a situation in which two tables/values reference each other (e.g. <code>table.__index = table</code>).\u00a0\u21a9</p> </li> </ol>"},{"location":"Modules/UTF8Reverse/","title":"UTF8Reverse Sub-Module Documentation","text":""},{"location":"Modules/UTF8Reverse/#overview","title":"Overview","text":"<p>A sub-module that contains a single function for reversing non-ASCII strings.</p>"},{"location":"Modules/UTF8Reverse/#functions","title":"Functions","text":""},{"location":"Modules/UTF8Reverse/#utf8reveres","title":"UTF8Reveres","text":""},{"location":"Modules/UTF8Reverse/#utf8reveres-purpose","title":"Purpose","text":"<p>This function takes a string <code>Str</code> as input and returns a new string with the words in the original string reversed in place.  The function is designed to handle unicode strings and uses the utf8 library to iterate through the graphemes1 in the input string.</p>"},{"location":"Modules/UTF8Reverse/#utf8reveres-syntax","title":"Syntax","text":"<p><code>UTF8Reverse(Str: string): string</code></p>"},{"location":"Modules/UTF8Reverse/#utf8reveres-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The utf-8 string to reverse its words.</li> </ul>"},{"location":"Modules/UTF8Reverse/#utf8reveres-returns","title":"Returns","text":"<ul> <li>string  The reversed input string.</li> </ul>"},{"location":"Modules/UTF8Reverse/#utf8reveres-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.UTF8Reverse(\"Hello, World!\"))\nprint(String.UTF8Reverse(\"\u0648\u0645\u0631\u062d\u0628\u0627\u064b! \u0623\u0647\u0644\u0627\u064b\"))\nprint(String.UTF8Reverse(\"\u0100b\u0101c \ua71c\"))\nprint(String.UTF8Reverse(\"\ud83c\udf0d\ud83c\udf0f\ud83c\udf0e\"))\nprint(String.UTF8Reverse(\"\u3053\u3093\u306b\u3061\u306f\uff01 \u4e16\u754c\u3002 \u3053\u308c\u306f\u30c6\u30b9\u30c8\u6587\u5b57\u5217\u3067\u3059\u3002\"))\nprint(String.UTF8Reverse(\"\u3059\u3002\u308c\u3079\u30c7\u30f3\u30bf\u30bb\u30c3\u30c8 \u308c \u308f\u305b \u4e16\u754c\u3002 \uff01\u306f\u3061\u306b\u3093\u3053\"))\n</code></pre> <pre><code>!World Hello,\n\u0623\u0647\u0644\u0627\u064b \u0648\u0645\u0631\u062d\u0628\u0627\u064b!        -- \"!\" Character should be at the end and not like that.\n\ua71c \u0100b\u0101c\n\ud83c\udf0d\ud83c\udf0f\ud83c\udf0e\n\u3053\u308c\u306f\u30c6\u30b9\u30c8\u6587\u5b57\u5217\u3067\u3059\u3002 \u4e16\u754c\u3002 \u3053\u3093\u306b\u3061\u306f\uff01\n\u3059\u3002\u308c\u3079\u30c7\u30f3\u30bf\u30bb\u30c3\u30c8 \u308c \u308f\u305b \u4e16\u754c\u3002 \uff01\u306f\u3061\u306b\u3093\u3053\n</code></pre> <ol> <li> <p>A combination of one or more characters that form a single visual entity.\u00a0\u21a9</p> </li> </ol>"},{"location":"Modules/Validator/","title":"Validator Sub-Module Documentation","text":""},{"location":"Modules/Validator/#overview","title":"Overview","text":"<p>The Validator sub-library is a collection of functions designed to check and validate strings.  It provides a range of checks for various characteristics.  These functions are useful for verifying the correctness and suitability of strings in various contexts.</p> <p>Notice</p> <p>There could be boolean outputs that be grouped and be separated by a single line for better appearance without an additional print between.</p>"},{"location":"Modules/Validator/#functions","title":"Functions","text":""},{"location":"Modules/Validator/#isnumeric","title":"IsNumeric","text":""},{"location":"Modules/Validator/#isnumeric-purpose","title":"Purpose","text":"<p>This function checks if the given string represents a numeric value.  It returns <code>true</code> if the string is a numeric value, <code>false</code> otherwise. </p> <p>This function considers a numeric value as a string that can be converted to a number type, such as integer, float, or double.</p>"},{"location":"Modules/Validator/#isnumeric-syntax","title":"Syntax","text":"<p><code>IsNumeric(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isnumeric-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to check.</li> </ul>"},{"location":"Modules/Validator/#isnumeric-returns","title":"Returns","text":"<ul> <li>boolean <code>true</code> if the input string represents a numeric value, <code>false</code> otherwise.</li> </ul>"},{"location":"Modules/Validator/#isnumeric-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsNumeric(\"123\"))\nprint(String.IsNumeric(\"-123\"))\nprint(String.IsNumeric(\"1.23\"))\nprint(String.IsNumeric(\"5e9\"))\n\nprint(String.IsNumeric(\"12 3\"))\nprint(String.IsNumeric(\"a123\"))\nprint(String.IsNumeric(\"123a\"))\nprint(String.IsNumeric(\"\"))\n</code></pre> <pre><code>true\ntrue\ntrue\ntrue\n\nfalse\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#isinteger","title":"IsInteger","text":""},{"location":"Modules/Validator/#isinteger-purpose","title":"Purpose","text":"<p>This function checks if the given string represents an integer value.</p>"},{"location":"Modules/Validator/#isinteger-syntax","title":"Syntax","text":"<p><code>IsInteger(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isinteger-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be checked.</li> </ul>"},{"location":"Modules/Validator/#isinteger-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the given string represents an integer value or not.  If the string represents an integer value, the function returns <code>true</code>, otherwise it returns <code>false</code>.</li> </ul>"},{"location":"Modules/Validator/#isinteger-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsInteger(\"123\"))\nprint(String.IsInteger(\"-456\"))\nprint(String.IsInteger(\"0\"))\n\nprint(String.IsInteger(\"\"))\nprint(String.IsInteger(\"123.4\"))\nprint(String.IsInteger(\"abc\"))\n</code></pre> <pre><code>true\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#isalpha","title":"IsAlpha","text":""},{"location":"Modules/Validator/#isalpha-purpose","title":"Purpose","text":"<p>Checks if a string consists only of alphabetical characters and spaces.  It returns a boolean value indicating whether the string is made up of only alphabetical characters and spaces or not.</p>"},{"location":"Modules/Validator/#isalpha-syntax","title":"Syntax","text":"<p><code>IsAlpha(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isalpha-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be checked.</li> </ul>"},{"location":"Modules/Validator/#isalpha-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the string is made up of only alphabetical characters and spaces or not.</li> </ul>"},{"location":"Modules/Validator/#isalpha-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsAlpha(\"Hello\"))\nprint(String.IsAlpha(\"HELLO\"))\nprint(String.IsAlpha(\"AbCd EfG\"))\n\nprint(String.IsAlpha(\"\"))\nprint(String.IsAlpha(\"     \"))\nprint(String.IsAlpha(\"12345\"))\nprint(String.IsAlpha(\"Hello123!\"))\nprint(String.IsAlpha(\"AbCdEfG1\"))\n</code></pre> <pre><code>true\ntrue\ntrue\n\nfalse\nfalse\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#isalphanum","title":"IsAlphaNum","text":""},{"location":"Modules/Validator/#isalphanum-purpose","title":"Purpose","text":"<p>A function that checks if a given string is alphanumeric or not.  An alphanumeric string is a string that consists of only letters (a-z, A-Z) and digits (0-9) along with spaces if there any.</p>"},{"location":"Modules/Validator/#isalphanum-syntax","title":"Syntax","text":"<p><code>IsAlphaNum(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isalphanum-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be checked.</li> </ul>"},{"location":"Modules/Validator/#isalphanum-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value of <code>true</code> if the given string is alphanumeric and <code>false</code> if it is not.</li> </ul>"},{"location":"Modules/Validator/#isalphanum-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsAlphaNum(\"Abc123\"))\nprint(String.IsAlphaNum(\"Hello123\"))\nprint(String.IsAlphaNum(\"1234567890\"))\nprint(String.IsAlphaNum(\"Hello World\"))\n\nprint(String.IsAlphaNum(\"    \"))          -- Only Consists of Space Characters\nprint(String.IsAlphaNum(\"@#!$\"))          -- Contains Punctuation Characters\nprint(String.IsAlphaNum(\"Hello World!\"))  -- Contains a Punctuation Character \"!\"\n</code></pre> <pre><code>true\ntrue\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#isblank","title":"IsBlank","text":""},{"location":"Modules/Validator/#isblank-purpose","title":"Purpose","text":"<p>Checks if the given string is blank (only consists of space characters1) or empty.</p>"},{"location":"Modules/Validator/#isblank-syntax","title":"Syntax","text":"<p><code>IsBlank(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isblank-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string to check if it is blank or not.</li> </ul>"},{"location":"Modules/Validator/#isblank-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the given string is blank or not.  A string is considered blank if it consists only of whitespace characters or is empty.</li> </ul>"},{"location":"Modules/Validator/#isblank-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsBlank(\"\"))\nprint(String.IsBlank(\"   \"))\nprint(String.IsBlank(\"\\t\\t    \\n\"))\n\nprint(String.IsBlank(\"abc\"))\nprint(String.IsBlank(\"a b c\"))\n</code></pre> <pre><code>true\ntrue\ntrue\n\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#isupper","title":"IsUpper","text":""},{"location":"Modules/Validator/#isupper-purpose","title":"Purpose","text":"<p>Checks if the provided string is uppercase.  It returns a boolean value indicating if the string is uppercase or not.</p>"},{"location":"Modules/Validator/#isupper-syntax","title":"Syntax","text":"<p><code>IsUpper(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isupper-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string to check if it is upper-case or not.</li> </ul>"},{"location":"Modules/Validator/#isupper-returns","title":"Returns","text":"<ul> <li>boolean <code>true</code> if the input string does not contain any lower-case characters, otherwise, the returned value is <code>false</code>.</li> </ul>"},{"location":"Modules/Validator/#isupper-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsUpper(\"HELLO WORLD!\"))\nprint(String.IsUpper(\"HELLO  WORLD\"))\nprint(String.IsUpper(\"HELLO WORD! @911\"))\n\nprint(String.IsUpper(\"123\"))          -- Conains Only Numbers\nprint(String.IsUpper(\"HELLO World!\")) -- The string contains lower-case characters\nprint(String.IsUpper(\"hello world\"))  -- The string is all lower-case\n</code></pre> <pre><code>true\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#islower","title":"IsLower","text":""},{"location":"Modules/Validator/#islower-purpose","title":"Purpose","text":"<p>Checks if the provided string is lowercase.  It returns a boolean value indicating if the string is lowercase or not.</p>"},{"location":"Modules/Validator/#islower-syntax","title":"Syntax","text":"<p><code>IsLower(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#islower-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string value to be checked.</li> </ul>"},{"location":"Modules/Validator/#islower-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating if the provided string is lower-case or not.</li> </ul>"},{"location":"Modules/Validator/#islower-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsLower(\"hello\"))\nprint(String.IsLower(\"hello123\"))\nprint(String.IsLower(\"hello, @911\"))\n\nprint(String.IsLower(\"\"))\nprint(String.IsLower(\"123\"))\nprint(String.IsLower(\"HELLO\"))\n</code></pre> <pre><code>true\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#istagged","title":"IsTagged","text":""},{"location":"Modules/Validator/#istagged-purpose","title":"Purpose","text":"<p>This function checks whether a given string is possibly tagged or not.  A string is considered tagged if it is only contains hashtags \"#\" if FullMatch is <code>true</code> or <code>nil</code>, also, considered tagged if it contains three or more hashtags in sequence <code>\"###\"</code> while FullMatch is <code>false</code>.</p>"},{"location":"Modules/Validator/#istagged-syntax","title":"Syntax","text":"<p><code>IsTagged(Str: string, FullMatch: boolean?): boolean</code></p>"},{"location":"Modules/Validator/#istagged-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to check.</li> <li><code>FullMatch: boolean</code> Optional  A boolean value indicating whether the given string should be entirely tagged or just be a part of it. The default value is <code>true</code>.</li> </ul>"},{"location":"Modules/Validator/#istagged-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the given string is possibly tagged or not.</li> </ul>"},{"location":"Modules/Validator/#istagged-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsTagged(\"Hello World\"))\nprint(String.IsTagged(\"### Hello World\"))        -- Somewhat tagged but the FullMatch is on\nprint(String.IsTagged(\"##### World ### world\"))  -- FullMatch is on\n\nprint(String.IsTagged(\"############\"))\nprint(String.IsTagged(\"Hello ### World\", false))\nprint(String.IsTagged(\"Hello World #####\", false))\n</code></pre> <pre><code>false\nfalse\nfalse\n\ntrue\ntrue\ntrue\n</code></pre>"},{"location":"Modules/Validator/#isascii","title":"IsASCII","text":""},{"location":"Modules/Validator/#isascii-purpose","title":"Purpose","text":"<p>Checks if a given string is an ASCII string or not.  An ASCII string is a string that only contains ASCII characters, which are a set of 128 characters (0-127) defined in the ASCII standard."},{"location":"Modules/Validator/#isascii-syntax","title":"Syntax","text":"<p><code>IsASCII(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isascii-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to check.</li> </ul>"},{"location":"Modules/Validator/#isascii-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the input string consists only of ASCII characters (code points 0-127).</li> </ul>"},{"location":"Modules/Validator/#isascii-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsASCII(\"\"))\nprint(String.IsASCII(\"Hello, World!\"))\nprint(String.IsASCII(\"Hello, World!\\n\"))\nprint(String.IsASCII(\"H\u00e9llo, World!\"))   -- \u00e9 is not an ascii character\n</code></pre> <pre><code>true\ntrue\ntrue\nfalse\n</code></pre>"},{"location":"Modules/Validator/#ishexcolor","title":"IsHexColor","text":""},{"location":"Modules/Validator/#ishexcolor-purpose","title":"Purpose","text":"<p>Checks if a given string is a valid hexadecimal color representation.</p>"},{"location":"Modules/Validator/#ishexcolor-syntax","title":"Syntax","text":"<p><code>IsHexColor(Str: string, EnforceHash: boolean?): boolean</code></p>"},{"location":"Modules/Validator/#ishexcolor-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to check.</li> <li><code>EnforceHash: boolea</code> Optional  A boolean value which specifies if the hexadecimal color representation should start with the hashtag symbol <code>#</code> or not.</li> </ul>"},{"location":"Modules/Validator/#ishexcolor-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the string is a valid hexadecimal color representation or not.  If the <code>EnforceHash</code> argument is <code>true</code>, the function requires the <code>#</code> symbol to be present in the color representation.  If <code>EnforceHash</code> is <code>false</code> or <code>nil</code>, the presence of the <code>#</code> symbol is optional.</li> </ul>"},{"location":"Modules/Validator/#ishexcolor-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsHexColor(\"#FFF\"))\nprint(String.IsHexColor(\"#FF9C59\"))\nprint(String.IsHexColor(\"#ABCDEF\", true))\nprint(String.IsHexColor(\"ABCDEF\", false))\n\nprint(String.IsHexColor(\"FF9C59\", true))\nprint(String.IsHexColor(\"#FFA5G\"))\nprint(String.IsHexColor(\"#FFA5D5EE\"))\n</code></pre> <pre><code>true\ntrue\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#ispalindrome","title":"IsPalindrome","text":""},{"location":"Modules/Validator/#ispalindrome-purpose","title":"Purpose","text":"<p>Used to determine if a given string is a palindrome.  A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.</p>"},{"location":"Modules/Validator/#ispalindrome-syntax","title":"Syntax","text":"<p><code>IsPalindrome(Str: string, CaseSensitive: boolean?): boolean</code></p>"},{"location":"Modules/Validator/#ispalindrome-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The input string to check.</li> <li><code>CaseSensitive: boolean</code> Optional  A boolean value indicating whether the check should be case-sensitive or not.  The default value is <code>false</code>.</li> </ul>"},{"location":"Modules/Validator/#ispalindrome-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the string is a palindrome or not.</li> </ul>"},{"location":"Modules/Validator/#ispalindrome-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsPalindrome(\"Level\"))\nprint(String.IsPalindrome(\"racecar\"))\nprint(String.IsPalindrome(\"racecar\", true))\nprint(String.IsPalindrome(\"Madam\", false))\n\nprint(String.IsPalindrome(\"Madam\", true))\nprint(String.IsPalindrome(\"hello\", true))\n</code></pre> <pre><code>true\ntrue\ntrue\ntrue\n\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#istitile","title":"IsTitile","text":""},{"location":"Modules/Validator/#istitile-purpose","title":"Purpose","text":"<p>Used to determine if a given string is in title case format.</p>"},{"location":"Modules/Validator/#istitile-syntax","title":"Syntax","text":"<p><code>IsTitle(Str: string, Strict: boolean?): boolean</code></p>"},{"location":"Modules/Validator/#istitile-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string to check if it is a title.</li> <li><code>Strict: boolean</code> Optional  A boolean value that indicating whether the function should enforce strict adherence to the title format.  If Strict is not provided, it is set to <code>false</code> by default.</li> </ul>"},{"location":"Modules/Validator/#istitile-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the input string is in title case format.</li> </ul>"},{"location":"Modules/Validator/#istitile-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>print(String.IsTitle(\"The Quick Brown Fox\"))\nprint(String.IsTitle(\"The Quick Brown Fox\", true))\nprint(String.IsTitle(\"The Quick Brown Fox\", false))\nprint(String.IsTitle(\"The Catcher in the Rye\", true))\nprint(String.IsTitle(\"The Catcher in the Rye\", false))\n\nprint(String.IsTitle(\"The Quick brown Fox\"))\nprint(String.IsTitle(\"the Quick Brown Fox\"))\nprint(String.IsTitle(\"A man, a plan, a canal, Panama!\", false))\n</code></pre> <pre><code>true\ntrue\ntrue\ntrue\ntrue\n\nfalse\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#starts","title":"Starts","text":""},{"location":"Modules/Validator/#starts-purpose","title":"Purpose","text":"<p>Checks whether a string starts with any of the specified prefixe(s).</p>"},{"location":"Modules/Validator/#starts-syntax","title":"Syntax","text":"<p><code>Starts(Str: string, Prefixes: (string | {string})): boolean</code></p>"},{"location":"Modules/Validator/#starts-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to check.</li> <li><code>Prefixes: (string | table)</code>  A single string or an array of strings representing the prefixes to check for.</li> </ul>"},{"location":"Modules/Validator/#starts-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the string starts with any of the specified prefixe(s).</li> </ul>"},{"location":"Modules/Validator/#starts-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Result = String.Starts(\"Hello\", {\"H\", \"He\"})\nprint(Result)\n\nResult = String.Starts(\"Hello\", {\"h\", \"he\"})\nprint(Result)\n\nResult = String.Starts(\"Hello\", \"h\")\nprint(Result)\n</code></pre> <pre><code>true\nfalse\nfalse\n</code></pre>"},{"location":"Modules/Validator/#ends","title":"Ends","text":""},{"location":"Modules/Validator/#ends-purpose","title":"Purpose","text":"<p>Determines whether a string ends with one of the specified suffixes.  It returns <code>true</code> if the string ends with any of the suffixes, and <code>false</code> otherwise.</p>"},{"location":"Modules/Validator/#ends-syntax","title":"Syntax","text":"<p><code>Ends(Str: string, Suffixes: (string | {string})): boolean</code></p>"},{"location":"Modules/Validator/#ends-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to be checked.</li> <li><code>Suffixes: (string | table)</code>  The suffix string or an array of suffixes to be checked.</li> </ul>"},{"location":"Modules/Validator/#ends-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the string ends with any of the specified suffixes.</li> </ul>"},{"location":"Modules/Validator/#ends-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Result = String.Ends(\"hello world\", {\"world\", \"rld\"})\nprint(Result)\n\nlocal Result = String.Ends(\"hello world\", {\"world\", \"rld\", \"foo\"})\nprint(Result)\n\nlocal Result = String.Ends(\"hello world\", {\"foo\", \"bar\"})\nprint(Result)\n\nlocal Result = String.Ends(\"file.jpeg\", {\".png\", \".jpg\", \".jpeg\"})\nprint(Result)\n</code></pre> <pre><code>true\ntrue\nfalse\ntrue\n</code></pre>"},{"location":"Modules/Validator/#contains","title":"Contains","text":""},{"location":"Modules/Validator/#contains-purpose","title":"Purpose","text":"<p>Returns a boolean value indicating whether the given string contains any of the specified <code>SubStrings</code>.  If the <code>SubStrings</code> parameter is a single string, then the function will return <code>true</code> if the substring is found within the <code>Str</code>.  If <code>SubStrings</code> is an array of strings, then the function will return <code>true</code> if any of the strings in the table are found within the given <code>Str</code>.</p>"},{"location":"Modules/Validator/#contains-syntax","title":"Syntax","text":"<p><code>Contains(Str: string, SubStrings: (string | {string})): boolean</code></p>"},{"location":"Modules/Validator/#contains-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  The string to search in.</li> <li><code>SubStrings: (string | table)</code>  The substring or substrings to search for. Can be a single string or an array of strings.</li> </ul>"},{"location":"Modules/Validator/#contains-returns","title":"Returns","text":"<ul> <li>boolean  A boolean indicating whether the string contains the given substring or any of substrings.</li> <li>string  The substring that was found, if any or an empty string.</li> <li>number  The starting index of the substring in the string.</li> <li>number  The ending index of the substring in the string.</li> </ul>"},{"location":"Modules/Validator/#contains-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Found, SubString, Start, End = String.Contains(\"Hello, world!\", \"world\")\nprint(Found, SubString, Start, End)\n\nlocal Found, SubString, Start, End = String.Contains(\"Hello, world!\", {\"Hello\", \"world\"})\nprint(Found, SubString, Start, End)\n\nlocal Found, SubString, Start, End = String.Contains(\"Hello, world!\", {\"Goodbye\", \"universe\"})\nprint(Found, SubString, Start, End)\n</code></pre> <pre><code>true world 8 12\ntrue Hello 1 5\nfalse   0 0\n</code></pre> Notice <p>If there isn't any found substring in the given string, the function would simply return an empty string for the second tuple value (a.k.a. the found substring), along with <code>0</code> for the rest of the tuple (start and end indexes).</p>"},{"location":"Modules/Validator/#isvalidusername","title":"IsValidUsername","text":""},{"location":"Modules/Validator/#isvalidusername-purpose","title":"Purpose","text":"<p>Checks whether or not the given string is a valid username for Roblox platform by doing some top-layer validations.  It checks that the username meets certain criteria such as length, characters allowed, and appropriateness.</p>"},{"location":"Modules/Validator/#isvalidusername-syntax","title":"Syntax","text":"<p><code>IsValidUsername(Str: string): boolean</code></p>"},{"location":"Modules/Validator/#isvalidusername-parameters","title":"Parameters","text":"<ul> <li><code>Str: string</code>  A string to check if it is a valid username.</li> </ul>"},{"location":"Modules/Validator/#isvalidusername-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the input string is actually a valid username by returning <code>true</code> or not by returning <code>false</code>.</li> <li>string  A string value that provides feedback on why the validation failed if the result is <code>false</code>.  This would be an empty string if the username validation has succeeded.</li> </ul>"},{"location":"Modules/Validator/#isvalidusername-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Result, Feedback = String.IsValidUsername(\"valid_username\")\nprint(Result, Feedback)\n\nlocal Result, Feedback = String.IsValidUsername(\"eri_5050\")\nprint(Result, Feedback) \n\nlocal Result, Feedback = String.IsValidUsername(\"1234567\")\nprint(Result, Feedback) \n\nlocal IsValid, Feedback = String.IsValidUsername(\"Test_username_\")\nprint(IsValid, Feedback)\n\nlocal IsValid, Feedback = String.IsValidUsername(\"Me@4_test\")\nprint(IsValid, Feedback)\n\nlocal IsValid, Feedback = String.IsValidUsername(\"tempo_82_e\")\nprint(IsValid, Feedback)\n</code></pre> <pre><code>true \ntrue \n\nfalse Username might contain private information.\nfalse Usernames cannot start or end with underscore \"_\".\nfalse Usernames may only contain letters, numbers, and a single underscore.\nfalse Usernames can have at most one underscore character \"_\".\n</code></pre> <p>Warning</p> <p>Please note that this function only provides a basic validation for input strings and does not check the input text for inappropriate words or filter it.  It is important to consider additional filtering for the input text, especially if it will be visible to others.</p>"},{"location":"Modules/Validator/#passwordvalidate","title":"PasswordValidate","text":""},{"location":"Modules/Validator/#passwordvalidate-purpose","title":"Purpose","text":"<p>A basic password validation function that returns if the password is valid, its expected strength score, and a feedback string if it was not valid.</p>"},{"location":"Modules/Validator/#passwordvalidate-syntax","title":"Syntax","text":"<p><code>PasswordValidate(Password: string, EnforceStandardRequirements: boolean?): boolean</code></p>"},{"location":"Modules/Validator/#passwordvalidate-parameters","title":"Parameters","text":"<ul> <li><code>Password: string</code>  A password string to check for its validity and strength.</li> <li><code>EnforceStandardRequirements: boolean</code> Optional  A boolean that determines whether the standard requirements for a password be enforced on the given string or not2.   Default: <code>false</code>.</li> </ul>"},{"location":"Modules/Validator/#passwordvalidate-returns","title":"Returns","text":"<ul> <li>boolean  A boolean value indicating whether the input string is actually a valid username by returning <code>true</code> or not by returning <code>false</code>.</li> <li>number  An expected strength for the given string its range is between 0-100.</li> <li>string  If the sthring given is not valide, a feedback string represents the reason of why the password is not valid is returned; Otherwise, a <code>nil</code> value is returned.</li> </ul>"},{"location":"Modules/Validator/#passwordvalidate-examples","title":"Examples","text":"Code SampleExpected Output <pre><code>local Password = \"P@ssW0rd\"\nlocal IsValid, Score, Feedback = String.PasswordValidate(Password)\nprint(IsValid, Score, Feedback)\n\nlocal Password = \"AAAaaaAAAAaaaa\"\nlocal IsValid, Score, Feedback = String.PasswordValidate(Password)\nprint(IsValid, Score, Feedback)\n\nlocal Password = \"AsDaSd\"\nlocal IsValid = String.PasswordValidate(Password)\nprint(IsValid)\n\nlocal Password = \"12345\"\nlocal IsValid = String.PasswordValidate(Password)\nprint(IsValid)\n\nlocal Password = \"5555555555555555555\"\nprint(String.PasswordValidate(Password))\n\nlocal Password = \"trlxoth6vu\"\nprint(String.PasswordValidate(Password))\n\nlocal Password = \"dre9e@#e9u\"\nprint(String.PasswordValidate(Password, true))\n\nlocal Password = \"b5A&amp;\"\nprint(String.PasswordValidate(Password, true))\n\nlocal Password = \"@ACre9l9E9O@\"\nprint(String.PasswordValidate(Password, true))\n\nlocal Password = \"+lHi94Ku3h6$#Wrot?un\"\nprint(String.PasswordValidate(Password, true))\n</code></pre> <pre><code>false 0 Password is weak and is banned from usage.\nfalse 0 Password consists of only the same alphabetic character.\nfalse\nfalse\nfalse 0 Password consists of only the same or similar integers.\ntrue 40 nil\ntrue 100 nil\nfalse 0 Password length should be between 8 to 64 characters.\ntrue 100 nil\ntrue 100 nil\n</code></pre> <ol> <li> <p>Equivalent to ( \\t\\n\\v\\f\\r).\u00a0\u21a9</p> </li> <li> <p>Minimum of 8 character length and maximum of 64, at least one character of: specials, digits, upper-case characters, lower-case characters and should not match a blacklisted string.\u00a0\u21a9</p> </li> </ol>"}]}